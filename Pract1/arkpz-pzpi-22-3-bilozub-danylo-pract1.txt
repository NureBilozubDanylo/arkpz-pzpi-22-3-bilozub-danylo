МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Звіт
з практичної заняття №1
 з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду»



Виконав:
 студент групи ПЗПІ-22-3
Білозуб Данило  Владиславович

Перевірив:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2024


1 МЕТА РОБОТИ

Опанувати ключові рекомендації з написання чистого, ефективного та підтримуваного коду PHP, а також сформувати навички аналізу та рефакторингу коду для підвищення його якості та відповідності сучасним стандартам розробки.

2 ВСТУП

При написанні коду на PHP важливо дотримуватися принципів читабельності, чистоти та підтримуваності. Це дозволяє створювати рішення, які легко розуміти, тестувати та модифікувати. Чистий і добре структурований код є ключовим фактором для спрощення роботи розробників: він допомагає швидше знаходити помилки, додавати новий функціонал і уникати зайвих труднощів під час рефакторингу.
Дотримання стандартів написання коду також підвищує продуктивність роботи команд, оскільки дозволяє кожному учаснику легко розібратися в проекті. Стандартизований підхід до форматування, іменування та документування робить код не лише зручним для розробників, а й зрозумілим для зовнішніх фахівців, які можуть працювати з проектом у майбутньому.
Основною ідеєю цієї доповіді є розгляд основних рекомендацій щодо написання чистого, масштабованого та підтримуваного коду на PHP.    

3 ХІД РОБОТИ

Посилання на відео з демонстраціями порад написання коду мовою PHP наведено у додатку А.

3.1 Важливість правил оформлення коду 

Дотримуйтеся єдиного стилю кодування в команді, щоб полегшити співпрацю.
У великих командах розробників різні стилі написання коду можуть ускладнювати роботу. Наприклад, коли кожен програміст оформлює код по-своєму, зростає кількість непорозумінь і часу на розбір чужого коду. 
Приклади гарного та поганого оформлення наведено у додатку Б.

3.2 Структура коду

Розбивайте великий код на менші модулі, щоб полегшити читання та тестування.
- Кожен файл повинен мати єдину відповідальність.
- Уникайте надмірної довжини функцій — оптимальний розмір однієї функції 20-30 рядків.
Приклади гарного та поганого структурування наведено у додатку В.

3.3 Форматування коду

Використовуйте стандартне форматування щоб зробити код візуально зрозумілим.
Важливим є дотримання єдиного стилю форматування коду:
- Відступи: Використовуйте 4 пробіли, а не табуляцію.
-  Довжина рядка: Не більше 120 символів.
- Відкриваючі дужки: Завжди на одному рівні з конструкцією (стиль Allman).
Приклади гарного та поганого форматування наведено у додатку Г.

3.4 Іменування змінних, функцій, класів

Обирайте лаконічні й зрозумілі назви для функцій, змінних та класів.
Імена повинні бути зрозумілими і чітко вказувати на призначення змінної, функції чи класу. Вони мають бути описовими, але не надто довгими. Якщо функція виконує певну задачу, її ім'я повинно це відображати. Також, імена повинні бути інтуїтивно зрозумілими для інших розробників.
Приклади гарного та поганого іменування наведено у додатку Д.

3.5 Коментарі

Пишіть коментарі тільки там, де вони дійсно потрібні. Уникайте очевидних пояснень.
Коментарі використовуються для пояснення складних ділянок коду, але їх потрібно застосовувати розумно. Занадто велика кількість коментарів у простих місцях робить код громіздким. Коментарі мають пояснювати наміри розробника, а не очевидний функціонал.
Приклади гарного та поганого використання кометнтарів наведено у додатку Е.

3.6 Документування коду

Використовуйте PHPDoc для стандартизованого опису функцій та класів.
Документування коду є важливим аспектом, який часто недооцінюється, але має вирішальне значення для довготривалої підтримки та розширення програмних продуктів. Хороше документування дозволяє іншим розробникам швидко зрозуміти, як працює ваш код, без необхідності читати кожен рядок і розбиратися в логіці.
Приклади гарного та поганого документування наведено у додатку Ж.

3.7 Конвенції стилю кодування для PHP

Дотримуйтеся стандартів PSR-12 для кращої сумісності з іншими розробниками.
PSR-1 і PSR-12: Основні стандарти PHP.
- Усі класи мають бути в CamelCase.
- Константи – у UPPER_SNAKE_CASE.
- Імена файлів мають відповідати назвам класів.
Відступи: 4 пробіли (не табуляція).
Приклади гарного та поганого дотримуйтеся стандартів наведено у додатку З.

3.8 Кодування на основі тестування

Завжди пишіть тести перед реалізацією функціоналу, щоб уникнути помилок.
Методологія розробки "Кодування через тестування" полягає у написанні тестів до створення основного коду. Це дозволяє перевірити коректність програми до її написання.
Підходи до написання тестів
- Використовуйте інструменти для тестування, наприклад PHPUnit.
- Кожен тест має перевіряти одну функціональність.
Приклади тестування  наведено у додатку К.

3.9 Управління помилками в PHP

Використовуйте конструкцію try-catch для швидкого оброблення помилок.
Правильне управління помилками допомагає:
- Запобігти збоїв у роботі програми.
- Надати користувачу зрозумілий опис помилки замість технічної інформації.
- Легше знайти й виправити баги під час розробки або в продуктивному середовищі.
Приклади гарного та поганого управління помилками наведено у додатку К.
Слайди презентаціїинаведено у додатку Л.

ВИСНОВКИ

В процесі ознайомлення з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду PHP ми побачили, як важливо дотримуватись стандартів і правил при роботі з кодом. Правильне форматування, структуризація, іменування та документування не лише підвищують якість програмного забезпечення, але й значно полегшують роботу як окремих розробників, так і команд.

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ

    1. PHP: The Right Way. URL: https://phptherightway.com (дата  використання 26.11.2024)
    2. Документація PHP. URL: https://www.php.net/docs.php (дата  використання 26.11.2024) 

ДОДАТОК А
Посилання на відео

https://youtu.be/c4E6QfiIyxQ – Посилання на відео з представленням доповіді.

ДОДАТОК Б
Приклади поганого та гарного оформлення коду

1 // Поганий приклад
2 
3 $conn = mysqli_connect("localhost", "root", "", "shop");
4 $res = mysqli_query($conn, "SELECT * FROM products");
5 while ($row = mysqli_fetch_assoc($res)) {
6     echo $row['name'] . " - " . $row['price'] . "<br>";
7 }
8 
9 // Гарний приклад
10 
11 // Підключення до бази даних
12 $connection = new mysqli("localhost", "root", "", "shop");
13 
14 // Перевірка підключення
15 if ($connection->connect_error) {
16     die("Помилка з'єднання: " . $connection->connect_error);
17 }
18 
19 // Запит до бази даних
20 $query = "SELECT name, price FROM products";
21 $result = $connection->query($query);
22 
23 if ($result && $result->num_rows > 0) {
24     // Виведення результатів
25     while ($product = $result->fetch_assoc()) {
26         echo "{$product['name']} - {$product['price']}<br>";
27     }
28 } else {
29     echo "Немає доступних товарів.";
30 }
31 
32 $connection->close();

ДОДАТОК В
Приклади поганої та гарної структури коду

1 $conn = mysqli_connect("localhost", "root", "", "shop");
2 function gP() {
3     global $conn;
4     $res = mysqli_query($conn, "SELECT * FROM products");
5     while ($r = mysqli_fetch_assoc($res)) {
6         echo $r['name'] . "<br>";
7     }
8 }
9 gP();
10 
11 
12 // Гарний приклад
13 
14 use Database\DatabaseConnection;
15 use Repositories\ProductRepository;
16 use Services\ProductService;
17 
18 // Підключення до бази даних
19 $databaseConnection = new DatabaseConnection("localhost", "root", "", "shop");
20 
21 // Створення репозиторію для продуктів
22 $productRepository = new ProductRepository($databaseConnection->getConnection());
23 
24 // Створення сервісу для роботи з продуктами
25 $productService = new ProductService($productRepository);
26 
27 // Виведення продуктів
28 $productService->displayProducts();
29 
30 // Закриття підключення до бази даних
31 $databaseConnection->closeConnection();

ДОДАТОК Г
Приклади поганого та гарного форматування коду

1 // Поганий приклад
2 
3 function getAllProductsSortedByPrice1($conn){$query="SELECT * FROM products ORDER BY price ASC";
4 $result=$conn->query($query);
5 if(!$result){die("Error: ".$conn->error);}
6 else{$products=[];
7 while($row=$result->fetch_assoc()){$products[]=$row;}
8     return $products;}}
9 
10 
11 // Гарний приклад
12 
13 function getAllProductsSortedByPrice($conn) {
14     // SQL-запит для отримання товарів, відсортованих за ціною
15     $query = "SELECT * FROM products ORDER BY price ASC";
16     
17     // Виконання запиту
18     $result = $conn->query($query);
19     
20     // Перевірка на помилки
21     if (!$result) {
22         die("Помилка запиту: " . $conn->error);
23     }
24     
25     // Формування масиву з товарами
26     $products = [];
27     while ($row = $result->fetch_assoc()) {
28         $products[] = $row;
29     }
30     
31     return $products;
32     }

ДОДАТОК Д
Приклади поганого та гарного іменувань

1 // Поганий приклад
2 
3 function calc($db, $m) {
4     $q = "SELECT SUM(qty) AS total FROM sales WHERE MONTH(date) = $m";
5     $res = $db->query($q);
6     if ($res) {
7         $r = $res->fetch_assoc();
8         return $r['total'];
9     } else {
10         return 0;
11     }
12 }
13 
14 // Гарний приклад
15 
16 function calculateTotalSalesForMonth(mysqli $connection): int {
17     // Підготовлений SQL-запит для запобігання SQL-ін'єкціям
18     $query = "SELECT SUM(quantity) AS total_quantity FROM sales WHERE MONTH(sale_date) = 4";
19     $result = $connection->query($query);
20 
21     // Отримання результату
22     $totalQuantity = 0;
23     if ($result) {
24         $row = $result->fetch_assoc();
25         $totalQuantity = $row['total_quantity'] ?? 0;
26     }
27 
28     return $totalQuantity;
29 }

ДОДАТОК Е
Приклади поганого та гарного використання коментарів

1 // Поганий приклад
2 
3 // Підключення до бази даних зоомагазину
4 $connection = new mysqli("localhost", "root", "", "shop"); 
5 // Створення  нового підключення з параметрами бд
6 
7 if ($connection->connect_error) { // Перевірка на виникнення помилки
8     die("Помилка з'єднання: " . $connection->connect_error); // Реагування на помилку
9 }
10 
11 // Отримання всіх товарів
12 $query = "SELECT name FROM products"; // SQL запит для  отримання товарів
13 $result = $connection->query($query); // Виконання SQL запиту для нашої бази даних
14 
15 if ($result && $result->num_rows > 0) { // Перевірка наявності результату
16     // Виведення назв товарів
17     while ($product = $result->fetch_assoc()) { // Цикл для проходження по результату
18         echo $product['name'] . "<br>"; // Вивід
19     }
20 } else {
21     echo "Товари не знайдено."; // Помилка
22 }
23 
24 $connection->close(); // Закриття з'єднання
25 
26 // Гарний приклад
27 
28 // Підключення до бази даних зоомагазину
29 $connection = new mysqli("localhost", "root", "", "shop");
30 
31 if ($connection->connect_error) {
32     die("Помилка з'єднання: " . $connection->connect_error);
33 }
34 
35 // Отримання всіх товарів
36 $query = "SELECT name FROM products";
37 $result = $connection->query($query);
38 
39 if ($result && $result->num_rows > 0) {
40     // Виведення назв товарів
41     while ($product = $result->fetch_assoc()) {
42         echo $product['name'] . "<br>";
43     }
44 } else {
45     echo "Товари не знайдено.";
46 }
47 
48 $connection->close();

ДОДАТОК Ж
Приклади поганого та гарного документування коду

1 // Поганий приклад
2 
3 function addProduct1($name, $price, $category, $connection ) {
4     $query = "INSERT INTO products (name, price, category) 
5     VALUES ('$name', '$price', '$category')";
6     $result = mysqli_query($connection, $query);
7     return $result;
8 }
9 
10 // Гарний приклад
11 
12 /**
13  * Додає новий товар до бази даних
14  *
15  * Ця функція приймає назву товару, ціну та категорію, а потім додає їх до бази даних.
16  * Вона використовує SQL-запит для вставки нових даних в таблицю продуктів.
17  * 
18  * @param mysqli $connection Підключення до бази даних
19  * @param string $name Назва товару
20  * @param float $price Ціна товару
21  * @param string $category Категорія товару (наприклад, "Корми для тварин")
22  * 
23  * @return bool Повертає true, якщо товар успішно додано, або false в разі помилки
24  */
25 function addProduct($name, $price, $category, $connection) {
26     $query = "INSERT INTO products (name, price, category) VALUES ('$name', '$price', '$category')";
27     $result = mysqli_query($connection, $query);
28     return $result;
29 }

ДОДАТОК З
Приклади дотримання та не дотрмання конвенцій стилю кодування для PHP

1 // Поганий приклад
2 
3 function addSale1($productId,$quantity,$totalPrice, $connection){
4 $query="INSERT INTO sales (product_id, quantity, total_price) VALUES('$productId', '$quantity', '$totalPrice')";
5 mysqli_query($connection,$query);
6 }
7 
8 // Гарний приклад
9 
10 /**
11  * Додає запис про продаж товару в базу даних.
12  *
13  * Ця функція приймає ідентифікатор товару, кількість проданого товару і загальну вартість,
14  * а також підключення до бази даних, а потім додає цей запис у таблицю продажів.
15  *
16  * @param mysqli $connection Підключення до бази даних
17  * @param int $productId Ідентифікатор товару
18  * @param int $quantity Кількість проданого товару
19  * @param float $totalPrice Загальна вартість проданого товару
20  * @return bool Повертає true, якщо запис успішно додано, і false в разі помилки
21  */
22 function addSale($connection, $productId, $quantity, $totalPrice)
23 {
24     // Перевірка на валідність введених даних
25     if ($quantity <= 0 || $totalPrice <= 0) {
26         return false;  // Якщо кількість або ціна некоректні, повертаємо false
27     }
28     // Підготовка SQL-запиту
29     $query = "INSERT INTO sales (product_id, quantity, total_price) VALUES (1, 2, 15)";
30     // Підготовка запиту для захисту від SQL-ін'єкцій
31     $stmt = mysqli_prepare($connection, $query);
32     if (!$stmt) {
33         error_log("Error preparing query: " . mysqli_error($connection));
34         return false;  // Якщо не вдалося підготувати запит
35     }
36     // Прив'язуємо параметри до запиту
37     mysqli_stmt_bind_param($stmt, "iid", $productId, $quantity, $totalPrice);
38     // Виконуємо запит
39     $result = mysqli_stmt_execute($stmt);
40     // Перевіряємо на успішне виконання запиту
41     if (!$result) {
42         // Логування помилки
43         error_log("Error executing query: " . mysqli_error($connection));
44         return false;  // Повертаємо false в разі помилки
45     }
46     // Закриваємо підготовлений запит
47     mysqli_stmt_close($stmt);
48     return true;  // Повертаємо true, якщо продаж успішно додано
49 }

ДОДАТОК К
Приклад тестування

1 //  Приклад тестування
2 
3 use PHPUnit\Framework\TestCase;
4 
5 class PriceCalculatorTest extends TestCase
6 {
7     public function testCalculateTotalPrice()
8     {
9         // Приклад масиву товарів, де кожен товар має ціну та кількість
10         $items = [
11             ['price' => 10.5, 'quantity' => 2], // 2 товару по 10.5
12             ['price' => 20.0, 'quantity' => 3], // 3 товару по 20.0
13             ['price' => 5.0, 'quantity' => 5],  // 5 товарів по 5.0
14         ];
15 
16         // Ожидаємий результат
17         $expected = 10.5 * 2 + 20.0 * 3 + 5.0 * 5; // 21 + 60 + 25 = 106
18 
19         // Перевіряємо, чи вірно працює функція
20         $this->assertEquals($expected, calculateTotalPrice($items));
21     }
22 }

ДОДАТОК Л
Приклади поганого та гарного управління помилками

1 // Поганий приклад
2 
3 function getProductById1($id,$connection) {
4     $query = "SELECT * FROM products WHERE id = $id";
5     $result = mysqli_query($connection, $query);
6 
7     if (!$result) {
8         echo "Помилка виконання запиту!";
9     }
10 
11     return mysqli_fetch_assoc($result);
12 }
13 $product = getProductById(5,$connection);
14 
15 // Гарний приклад
16 
17 function getProductById($id,$connection) {
18     // Перевірка валідності ідентифікатора
19     if (!is_int($id) || $id <= 0) {
20         throw new InvalidArgumentException("Неприпустимий ідентифікатор товару: $id");
21     }
22     // SQL-запит
23     $query = "SELECT * FROM products WHERE id = 2";
24     $stmt = mysqli_prepare($connection, $query);
25     if (!$stmt) {
26         throw new Exception("Не вдалося підготувати запит: " . mysqli_error($connection));
27     }
28     mysqli_stmt_bind_param($stmt, 'i', $id);
29     mysqli_stmt_execute($stmt);
30     $result = mysqli_stmt_get_result($stmt);
31     if (!$result) {
32         throw new Exception("Помилка виконання запиту: " . mysqli_error($connection));
33     }
34     $product = mysqli_fetch_assoc($result);
35     // Перевірка, чи знайдено товар
36     if (!$product) {
37         throw new Exception("Товар з ідентифікатором $id не знайдено.");
38     }
39     return $product;
40 }
41 // Використання функції з обробкою помилок
42 try {
43     $product = getProductById(5,$connection);
44     echo "Назва товару: " . $product['name'];
45 } catch (InvalidArgumentException $e) {
46     echo "Помилка вхідних даних: " . $e->getMessage();
47 } catch (Exception $e) {
48     error_log($e->getMessage()); // Логування помилки
49     echo "Сталася помилка, спробуйте пізніше.";
50 }


ДОДАТОК М
Скриншоти презентації

 
Рисунок M.1 – Титульний лист

 
Рисунок M.2 – Важливість правил оформлення коду

 
Рисунок M.3 – Приклади гарно та погано відфарматованого коду

 
Рисунок M.4 – Структура коду

 
Рисунок M.5 – Приклад поганої структури коду

 
Рисунок M.6 – Приклад правильно структурованого коду

 
Рисунок M.7 – Форматування коду

 
Рисунок M.8 – Приклад погано відформатованого коду

 
Рисунок M.9 – Приклад правильного форматування коду

 
Рисунок M.10 – Іменування змінних, функцій, класів

 
Рисунок M.11 – Стиль написання

 
Рисунок M.12 – Приклади поганого та гарного іменувань

 
Рисунок M.13 – Коментарі

 
Рисунок M.14 – Приклади поганого та гарного використання коментарів

 
Рисунок M.15 – Документування коду

 
Рисунок M.16 – Приклад  без документування

 
Рисунок M.17 – Приклад із задокументованим кодом

 
Рисунок M.18 – Конвенції стилю кодування для PHP

 
Рисунок M.19 – Код без дотримання конвенсій стилю кодування для PHP

 
Рисунок M.20 – Код де дотримано конвенсії стилю кодування для PHP

 
Рисунок M.21 – Кодування на основі тестування (TDD)

 
Рисунок M.22 – Приклад тестування

 
Рисунок M.23 – Управління помилками в PHP

 
Рисунок M.24 – Основні принципи управління помилками в PHP
 
 
Рисунок M.25 – Приклади коду з та без управління помилками 

 
Рисунок M.26 – Інструменти та автоматизація для підтримки якості коду

 
Рисунок M.27 – Висновки
 
 
Рисунок M.28 – Джерела

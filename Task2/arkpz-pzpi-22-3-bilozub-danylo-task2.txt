МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Звіт
з лабораторної роботи №1
 з дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API)»


Виконав:
 студент групи ПЗПІ-22-3
Білозуб Данило  Владиславович

Перевірив:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович







Харків 2024


1 МЕТА РОБОТИ

Метою лабораторної роботи є розробка бази даних та прикладного програмного інтерфейсу (API) для серверної частини програмної системи для контролю життя живих істот та кліматичних умов для них в зоомагазині. Це включає створення структури бази даних, розробку функцій для взаємодії з нею, реалізацію API для інтеграції серверної частини з клієнтськими додатками, а також перевірку коректності функціонування створеного коду.

2 ХІД РОБОТИ

Спочатку створюємо UML діаграму прецедентів для програмної системи для контролю життя живих істот та кліматичних умов для них в зоомагазині. Для зручного зображення діаграми  вона була розбита на 4 частини вони наведені в Додатку А.
Далі творюємо ER діаграму, вона наведена в Додатку Б, та на її основі створюємо базу даних. Після цього за домогою вбудованої функції бази даниї створюємо діаграму структури бази даних, вона наведена в Додатку В.
Після цього я розробив API для взаємодії серверної частини з клієнтами. За допомогою Swagger була написана OpenAPI специфікація, вона  неведена в додатку Г.
Логіка взаємодії серверної частини з БД наведена в додатку Д
Логіка взаємодії серверної частини з клієнтами наведена в додатку Е.
Відео посилання на ютуб наведено в  додатку Ж.
У процесі створення системи були прийняті наступні інженерні рішення:
1. Технології серверної частини:
         Серверна частина реалізована за допомогою фреймворка FastAPI на мові програмування Python. Цей фреймворк обраний завдяки його високій продуктивності, зручності у розробці RESTful API, інтеграції з сучасними стандартами OpenAPI та автоматичній генерації документації.
2. Робота з базою даних:
        У якості системи управління базами даних використовується PostgreSQL. Це рішення обрано завдяки надійності, підтримці складних транзакцій, можливостям масштабування та роботі з розширеннями. Для взаємодії з базою даних використовується ORM-бібліотека SQLAlchemy, яка забезпечує гнучкість у створенні запитів, а також дозволяє динамічно управляти даними на різних рівнях складності.
3. Архітектура:
        Система побудована на основі модульної структури, яка забезпечує чітке розділення логіки:
•	Серверний рівень відповідає за обробку HTTP-запитів, авторизацію та валідацію даних.
•	Рівень даних реалізує взаємодію з базою даних через моделі SQLAlchemy.
4. Розширюваність та тестування:
Система спроектована таким чином, щоб бути легко розширюваною завдяки використанню модульності.
     
ВИСНОВКИ

У результаті виконання лабораторної роботи було розроблено базу даних для серверної частини програмної системи для контролю життя живих істот та кліматичних умов для них в зоомагазині, створено її структуру та реалізовано функції для роботи з даними. Також було спроектовано та реалізовано API для взаємодії серверної частини з клієнтами, забезпечено його відповідність принципам RESТ. Проведено тестування серверного коду, що підтвердило його працездатність та відповідність поставленим вимогам. Виконана робота дозволила закріпити навички проектування баз даних, розробки API та інтеграції цих компонентів у програмну систему.

ДОДАТОК А
Uml діаграма прецедентів

 
Рисунок А.1. - UML діаграма прецедентів (частина 1)

 
Рисунок А.2 - UML діаграма прецедентів (частина 2)

 
Рисунок А.3 - UML діаграма прецедентів (частина 3)

 
Рисунок А.4 - UML діаграма прецедентів (частина 4)





















ДОДАТОК Б
ER діаграма

 
Рисунок Б.1 - ER діаграма


















ДОДАТОК В
Діаграма структури бд

 
Рисунок Б.1 - діаграма структури бд












ДОДАТОК Г
OpenAPI специфікація

1 {
2   "openapi": "3.0.2",
3   "info": {
4     "title": "ZooShopHelper",
5     "version": "0.1.0"
6   },
7   "paths": {
8     "/animals/": {
9       "post": {
10         "tags": [
11           "Animals"
12         ],
13         "summary": "Create Animal",
14         "operationId": "create_animal_animals__post",
15         "requestBody": {
16           "content": {
17             "application/json": {
18               "schema": {
19                 "$ref": "#/components/schemas/AnimalCreate"
20               }
21             }
22           },
23           "required": true
24         },
25         "responses": {
26           "200": {
27             "description": "Successful Response",
28             "content": {
29               "application/json": {
30                 "schema": {
31                   "$ref": "#/components/schemas/AnimalBase"
32                 }
33               }
34             }
35           },
36           "422": {
37             "description": "Validation Error",
38             "content": {
39               "application/json": {
40                 "schema": {
41                   "$ref": "#/components/schemas/HTTPValidationError"
42                 }
43               }
44             }
45           }
46         }
47       }
48     },
49     "/animals/{animal_id}": {
50       "get": {
51         "tags": [
52           "Animals"
53         ],
54         "summary": "Read Animal",
55         "operationId": "read_animal_animals__animal_id__get",
56         "parameters": [
57           {
58             "required": true,
59             "schema": {
60               "title": "Animal Id",
61               "type": "integer"
62             },
63             "name": "animal_id",
64             "in": "path"
65           }
66         ],
67         "responses": {
68           "200": {
69             "description": "Successful Response",
70             "content": {
71               "application/json": {
72                 "schema": {
73                   "$ref": "#/components/schemas/AnimalBase"
74                 }
75               }
76             }
77           },
78           "422": {
79             "description": "Validation Error",
80             "content": {
81               "application/json": {
82                 "schema": {
83                   "$ref": "#/components/schemas/HTTPValidationError"
84                 }
85               }
86             }
87           }
88         }
89       },
90       "put": {
91         "tags": [
92           "Animals"
93         ],
94         "summary": "Update Animal",
95         "operationId": "update_animal_animals__animal_id__put",
96         "parameters": [
97           {
98             "required": true,
99             "schema": {
100               "title": "Animal Id",
101               "type": "integer"
102             },
103             "name": "animal_id",
104             "in": "path"
105           }
106         ],
107         "requestBody": {
108           "content": {
109             "application/json": {
110               "schema": {
111                 "$ref": "#/components/schemas/AnimalUpdate"
112               }
113             }
114           },
115           "required": true
116         },
117         "responses": {
118           "200": {
119             "description": "Successful Response",
120             "content": {
121               "application/json": {
122                 "schema": {
123                   "$ref": "#/components/schemas/AnimalBase"
124                 }
125               }
126             }
127           },
128           "422": {
129             "description": "Validation Error",
130             "content": {
131               "application/json": {
132                 "schema": {
133                   "$ref": "#/components/schemas/HTTPValidationError"
134                 }
135               }
136             }
137           }
138         }
139       },
140       "delete": {
141         "tags": [
142           "Animals"
143         ],
144         "summary": "Delete Animal",
145         "operationId": "delete_animal_animals__animal_id__delete",
146         "parameters": [
147           {
148             "required": true,
149             "schema": {
150               "title": "Animal Id",
151               "type": "integer"
152             },
153             "name": "animal_id",
154             "in": "path"
155           }
156         ],
157         "responses": {
158           "200": {
159             "description": "Successful Response",
160             "content": {
161               "application/json": {
162                 "schema": {
163                   "$ref": "#/components/schemas/AnimalBase"
164                 }
165               }
166             }
167           },
168           "422": {
169             "description": "Validation Error",
170             "content": {
171               "application/json": {
172                 "schema": {
173                   "$ref": "#/components/schemas/HTTPValidationError"
174                 }
175               }
176             }
177           }
178         }
179       }
180     },
181     "/users/": {
182       "post": {
183         "tags": [
184           "Users"
185         ],
186         "summary": "Create User",
187         "operationId": "create_user_users__post",
188         "requestBody": {
189           "content": {
190             "application/json": {
191               "schema": {
192                 "$ref": "#/components/schemas/UserCreate"
193               }
194             }
195           },
196           "required": true
197         },
198         "responses": {
199           "200": {
200             "description": "Successful Response",
201             "content": {
202               "application/json": {
203                 "schema": {
204                   "$ref": "#/components/schemas/UserBase"
205                 }
206               }
207             }
208           },
209           "422": {
210             "description": "Validation Error",
211             "content": {
212               "application/json": {
213                 "schema": {
214                   "$ref": "#/components/schemas/HTTPValidationError"
215                 }
216               }
217             }
218           }
219         }
220       }
221     },
222     "/users/{user_id}": {
223       "get": {
224         "tags": [
225           "Users"
226         ],
227         "summary": "Read User",
228         "operationId": "read_user_users__user_id__get",
229         "parameters": [
230           {
231             "required": true,
232             "schema": {
233               "title": "User Id",
234               "type": "integer"
235             },
236             "name": "user_id",
237             "in": "path"
238           }
239         ],
240         "responses": {
241           "200": {
242             "description": "Successful Response",
243             "content": {
244               "application/json": {
245                 "schema": {
246                   "$ref": "#/components/schemas/UserBase"
247                 }
248               }
249             }
250           },
251           "422": {
252             "description": "Validation Error",
253             "content": {
254               "application/json": {
255                 "schema": {
256                   "$ref": "#/components/schemas/HTTPValidationError"
257                 }
258               }
259             }
260           }
261         }
262       },
263       "put": {
264         "tags": [
265           "Users"
266         ],
267         "summary": "Update User",
268         "operationId": "update_user_users__user_id__put",
269         "parameters": [
270           {
271             "required": true,
272             "schema": {
273               "title": "User Id",
274               "type": "integer"
275             },
276             "name": "user_id",
277             "in": "path"
278           }
279         ],
280         "requestBody": {
281           "content": {
282             "application/json": {
283               "schema": {
284                 "$ref": "#/components/schemas/UserUpdate"
285               }
286             }
287           },
288           "required": true
289         },
290         "responses": {
291           "200": {
292             "description": "Successful Response",
293             "content": {
294               "application/json": {
295                 "schema": {
296                   "$ref": "#/components/schemas/UserBase"
297                 }
298               }
299             }
300           },
301           "422": {
302             "description": "Validation Error",
303             "content": {
304               "application/json": {
305                 "schema": {
306                   "$ref": "#/components/schemas/HTTPValidationError"
307                 }
308               }
309             }
310           }
311         }
312       },
313       "delete": {
314         "tags": [
315           "Users"
316         ],
317         "summary": "Delete User",
318         "operationId": "delete_user_users__user_id__delete",
319         "parameters": [
320           {
321             "required": true,
322             "schema": {
323               "title": "User Id",
324               "type": "integer"
325             },
326             "name": "user_id",
327             "in": "path"
328           }
329         ],
330         "responses": {
331           "200": {
332             "description": "Successful Response",
333             "content": {
334               "application/json": {
335                 "schema": {
336                   "$ref": "#/components/schemas/UserBase"
337                 }
338               }
339             }
340           },
341           "422": {
342             "description": "Validation Error",
343             "content": {
344               "application/json": {
345                 "schema": {
346                   "$ref": "#/components/schemas/HTTPValidationError"
347                 }
348               }
349             }
350           }
351         }
352       }
353     },
354     "/animal_feeding/": {
355       "post": {
356         "tags": [
357           "Animal_feeding"
358         ],
359         "summary": "Create Animal Feeding",
360         "operationId": "create_animal_feeding_animal_feeding__post",
361         "requestBody": {
362           "content": {
363             "application/json": {
364               "schema": {
365                 "$ref": "#/components/schemas/AnimalFeedingCreate"
366               }
367             }
368           },
369           "required": true
370         },
371         "responses": {
372           "200": {
373             "description": "Successful Response",
374             "content": {
375               "application/json": {
376                 "schema": {
377                   "$ref": "#/components/schemas/AnimalFeedingBase"
378                 }
379               }
380             }
381           },
382           "422": {
383             "description": "Validation Error",
384             "content": {
385               "application/json": {
386                 "schema": {
387                   "$ref": "#/components/schemas/HTTPValidationError"
388                 }
389               }
390             }
391           }
392         }
393       }
394     },
395     "/animal_feeding/{animal_feeding_id}": {
396       "get": {
397         "tags": [
398           "Animal_feeding"
399         ],
400         "summary": "Read Animal Feeding",
401         "operationId": "read_animal_feeding_animal_feeding__animal_feeding_id__get",
402         "parameters": [
403           {
404             "required": true,
405             "schema": {
406               "title": "Animal Feeding Id",
407               "type": "integer"
408             },
409             "name": "animal_feeding_id",
410             "in": "path"
411           }
412         ],
413         "responses": {
414           "200": {
415             "description": "Successful Response",
416             "content": {
417               "application/json": {
418                 "schema": {
419                   "$ref": "#/components/schemas/AnimalFeedingBase"
420                 }
421               }
422             }
423           },
424           "422": {
425             "description": "Validation Error",
426             "content": {
427               "application/json": {
428                 "schema": {
429                   "$ref": "#/components/schemas/HTTPValidationError"
430                 }
431               }
432             }
433           }
434         }
435       },
436       "put": {
437         "tags": [
438           "Animal_feeding"
439         ],
440         "summary": "Update Animal Feeding",
441         "operationId": "update_animal_feeding_animal_feeding__animal_feeding_id__put",
442         "parameters": [
443           {
444             "required": true,
445             "schema": {
446               "title": "Animal Feeding Id",
447               "type": "integer"
448             },
449             "name": "animal_feeding_id",
450             "in": "path"
451           }
452         ],
453         "requestBody": {
454           "content": {
455             "application/json": {
456               "schema": {
457                 "$ref": "#/components/schemas/AnimalFeedingUpdate"
458               }
459             }
460           },
461           "required": true
462         },
463         "responses": {
464           "200": {
465             "description": "Successful Response",
466             "content": {
467               "application/json": {
468                 "schema": {
469                   "$ref": "#/components/schemas/AnimalFeedingBase"
470                 }
471               }
472             }
473           },
474           "422": {
475             "description": "Validation Error",
476             "content": {
477               "application/json": {
478                 "schema": {
479                   "$ref": "#/components/schemas/HTTPValidationError"
480                 }
481               }
482             }
483           }
484         }
485       },
486       "delete": {
487         "tags": [
488           "Animal_feeding"
489         ],
490         "summary": "Delete Animal Feeding",
491         "operationId": "delete_animal_feeding_animal_feeding__animal_feeding_id__delete",
492         "parameters": [
493           {
494             "required": true,
495             "schema": {
496               "title": "Animal Feeding Id",
497               "type": "integer"
498             },
499             "name": "animal_feeding_id",
500             "in": "path"
501           }
502         ],
503         "responses": {
504           "200": {
505             "description": "Successful Response",
506             "content": {
507               "application/json": {
508                 "schema": {
509                   "$ref": "#/components/schemas/AnimalFeedingBase"
510                 }
511               }
512             }
513           },
514           "422": {
515             "description": "Validation Error",
516             "content": {
517               "application/json": {
518                 "schema": {
519                   "$ref": "#/components/schemas/HTTPValidationError"
520                 }
521               }
522             }
523           }
524         }
525       }
526     },
527     "/feedings/": {
528       "post": {
529         "tags": [
530           "Feedings"
531         ],
532         "summary": "Create Feeding",
533         "operationId": "create_feeding_feedings__post",
534         "requestBody": {
535           "content": {
536             "application/json": {
537               "schema": {
538                 "$ref": "#/components/schemas/FeedingCreate"
539               }
540             }
541           },
542           "required": true
543         },
544         "responses": {
545           "200": {
546             "description": "Successful Response",
547             "content": {
548               "application/json": {
549                 "schema": {
550                   "$ref": "#/components/schemas/FeedingBase"
551                 }
552               }
553             }
554           },
555           "422": {
556             "description": "Validation Error",
557             "content": {
558               "application/json": {
559                 "schema": {
560                   "$ref": "#/components/schemas/HTTPValidationError"
561                 }
562               }
563             }
564           }
565         }
566       }
567     },
568     "/feedings/{feeding_id}": {
569       "get": {
570         "tags": [
571           "Feedings"
572         ],
573         "summary": "Read Feeding",
574         "operationId": "read_feeding_feedings__feeding_id__get",
575         "parameters": [
576           {
577             "required": true,
578             "schema": {
579               "title": "Feeding Id",
580               "type": "integer"
581             },
582             "name": "feeding_id",
583             "in": "path"
584           }
585         ],
586         "responses": {
587           "200": {
588             "description": "Successful Response",
589             "content": {
590               "application/json": {
591                 "schema": {
592                   "$ref": "#/components/schemas/FeedingBase"
593                 }
594               }
595             }
596           },
597           "422": {
598             "description": "Validation Error",
599             "content": {
600               "application/json": {
601                 "schema": {
602                   "$ref": "#/components/schemas/HTTPValidationError"
603                 }
604               }
605             }
606           }
607         }
608       },
609       "put": {
610         "tags": [
611           "Feedings"
612         ],
613         "summary": "Update Feeding",
614         "operationId": "update_feeding_feedings__feeding_id__put",
615         "parameters": [
616           {
617             "required": true,
618             "schema": {
619               "title": "Feeding Id",
620               "type": "integer"
621             },
622             "name": "feeding_id",
623             "in": "path"
624           }
625         ],
626         "requestBody": {
627           "content": {
628             "application/json": {
629               "schema": {
630                 "$ref": "#/components/schemas/FeedingUpdate"
631               }
632             }
633           },
634           "required": true
635         },
636         "responses": {
637           "200": {
638             "description": "Successful Response",
639             "content": {
640               "application/json": {
641                 "schema": {
642                   "$ref": "#/components/schemas/FeedingBase"
643                 }
644               }
645             }
646           },
647           "422": {
648             "description": "Validation Error",
649             "content": {
650               "application/json": {
651                 "schema": {
652                   "$ref": "#/components/schemas/HTTPValidationError"
653                 }
654               }
655             }
656           }
657         }
658       },
659       "delete": {
660         "tags": [
661           "Feedings"
662         ],
663         "summary": "Delete Feeding",
664         "operationId": "delete_feeding_feedings__feeding_id__delete",
665         "parameters": [
666           {
667             "required": true,
668             "schema": {
669               "title": "Feeding Id",
670               "type": "integer"
671             },
672             "name": "feeding_id",
673             "in": "path"
674           }
675         ],
676         "responses": {
677           "200": {
678             "description": "Successful Response",
679             "content": {
680               "application/json": {
681                 "schema": {
682                   "$ref": "#/components/schemas/FeedingBase"
683                 }
684               }
685             }
686           },
687           "422": {
688             "description": "Validation Error",
689             "content": {
690               "application/json": {
691                 "schema": {
692                   "$ref": "#/components/schemas/HTTPValidationError"
693                 }
694               }
695             }
696           }
697         }
698       }
699     },
700     "/climate_settings/": {
701       "post": {
702         "tags": [
703           "Climate_settings"
704         ],
705         "summary": "Create Climate Settings",
706         "operationId": "create_climate_settings_climate_settings__post",
707         "requestBody": {
708           "content": {
709             "application/json": {
710               "schema": {
711                 "$ref": "#/components/schemas/ClimateSettingsCreate"
712               }
713             }
714           },
715           "required": true
716         },
717         "responses": {
718           "200": {
719             "description": "Successful Response",
720             "content": {
721               "application/json": {
722                 "schema": {
723                   "$ref": "#/components/schemas/ClimateSettingsBase"
724                 }
725               }
726             }
727           },
728           "422": {
729             "description": "Validation Error",
730             "content": {
731               "application/json": {
732                 "schema": {
733                   "$ref": "#/components/schemas/HTTPValidationError"
734                 }
735               }
736             }
737           }
738         }
739       }
740     },
741     "/climate_settings/{setting_id}": {
742       "get": {
743         "tags": [
744           "Climate_settings"
745         ],
746         "summary": "Read Climate Settings",
747         "operationId": "read_climate_settings_climate_settings__setting_id__get",
748         "parameters": [
749           {
750             "required": true,
751             "schema": {
752               "title": "Setting Id",
753               "type": "integer"
754             },
755             "name": "setting_id",
756             "in": "path"
757           }
758         ],
759         "responses": {
760           "200": {
761             "description": "Successful Response",
762             "content": {
763               "application/json": {
764                 "schema": {
765                   "$ref": "#/components/schemas/ClimateSettingsBase"
766                 }
767               }
768             }
769           },
770           "422": {
771             "description": "Validation Error",
772             "content": {
773               "application/json": {
774                 "schema": {
775                   "$ref": "#/components/schemas/HTTPValidationError"
776                 }
777               }
778             }
779           }
780         }
781       },
782       "put": {
783         "tags": [
784           "Climate_settings"
785         ],
786         "summary": "Update Climate Settings",
787         "operationId": "update_climate_settings_climate_settings__setting_id__put",
788         "parameters": [
789           {
790             "required": true,
791             "schema": {
792               "title": "Setting Id",
793               "type": "integer"
794             },
795             "name": "setting_id",
796             "in": "path"
797           }
798         ],
799         "requestBody": {
800           "content": {
801             "application/json": {
802               "schema": {
803                 "$ref": "#/components/schemas/ClimateSettingsUpdate"
804               }
805             }
806           },
807           "required": true
808         },
809         "responses": {
810           "200": {
811             "description": "Successful Response",
812             "content": {
813               "application/json": {
814                 "schema": {
815                   "$ref": "#/components/schemas/ClimateSettingsBase"
816                 }
817               }
818             }
819           },
820           "422": {
821             "description": "Validation Error",
822             "content": {
823               "application/json": {
824                 "schema": {
825                   "$ref": "#/components/schemas/HTTPValidationError"
826                 }
827               }
828             }
829           }
830         }
831       },
832       "delete": {
833         "tags": [
834           "Climate_settings"
835         ],
836         "summary": "Delete Climate Settings",
837         "operationId": "delete_climate_settings_climate_settings__setting_id__delete",
838         "parameters": [
839           {
840             "required": true,
841             "schema": {
842               "title": "Setting Id",
843               "type": "integer"
844             },
845             "name": "setting_id",
846             "in": "path"
847           }
848         ],
849         "responses": {
850           "200": {
851             "description": "Successful Response",
852             "content": {
853               "application/json": {
854                 "schema": {
855                   "$ref": "#/components/schemas/ClimateSettingsBase"
856                 }
857               }
858             }
859           },
860           "422": {
861             "description": "Validation Error",
862             "content": {
863               "application/json": {
864                 "schema": {
865                   "$ref": "#/components/schemas/HTTPValidationError"
866                 }
867               }
868             }
869           }
870         }
871       }
872     },
873     "/climate_history/": {
874       "post": {
875         "tags": [
876           "Climate_history"
877         ],
878         "summary": "Create Climate History",
879         "operationId": "create_climate_history_climate_history__post",
880         "requestBody": {
881           "content": {
882             "application/json": {
883               "schema": {
884                 "$ref": "#/components/schemas/ClimateHistoryCreate"
885               }
886             }
887           },
888           "required": true
889         },
890         "responses": {
891           "200": {
892             "description": "Successful Response",
893             "content": {
894               "application/json": {
895                 "schema": {
896                   "$ref": "#/components/schemas/ClimateHistoryBase"
897                 }
898               }
899             }
900           },
901           "422": {
902             "description": "Validation Error",
903             "content": {
904               "application/json": {
905                 "schema": {
906                   "$ref": "#/components/schemas/HTTPValidationError"
907                 }
908               }
909             }
910           }
911         }
912       }
913     },
914     "/climate_history/{climate_history_id}": {
915       "get": {
916         "tags": [
917           "Climate_history"
918         ],
919         "summary": "Read Climate History",
920         "operationId": "read_climate_history_climate_history__climate_history_id__get",
921         "parameters": [
922           {
923             "required": true,
924             "schema": {
925               "title": "Climate History Id",
926               "type": "integer"
927             },
928             "name": "climate_history_id",
929             "in": "path"
930           }
931         ],
932         "responses": {
933           "200": {
934             "description": "Successful Response",
935             "content": {
936               "application/json": {
937                 "schema": {
938                   "$ref": "#/components/schemas/ClimateHistoryBase"
939                 }
940               }
941             }
942           },
943           "422": {
944             "description": "Validation Error",
945             "content": {
946               "application/json": {
947                 "schema": {
948                   "$ref": "#/components/schemas/HTTPValidationError"
949                 }
950               }
951             }
952           }
953         }
954       },
955       "put": {
956         "tags": [
957           "Climate_history"
958         ],
959         "summary": "Update Climate History",
960         "operationId": "update_climate_history_climate_history__climate_history_id__put",
961         "parameters": [
962           {
963             "required": true,
964             "schema": {
965               "title": "Climate History Id",
966               "type": "integer"
967             },
968             "name": "climate_history_id",
969             "in": "path"
970           }
971         ],
972         "requestBody": {
973           "content": {
974             "application/json": {
975               "schema": {
976                 "$ref": "#/components/schemas/ClimateHistoryUpdate"
977               }
978             }
979           },
980           "required": true
981         },
982         "responses": {
983           "200": {
984             "description": "Successful Response",
985             "content": {
986               "application/json": {
987                 "schema": {
988                   "$ref": "#/components/schemas/ClimateHistoryBase"
989                 }
990               }
991             }
992           },
993           "422": {
994             "description": "Validation Error",
995             "content": {
996               "application/json": {
997                 "schema": {
998                   "$ref": "#/components/schemas/HTTPValidationError"
999                 }
1000               }
1001             }
1002           }
1003         }
1004       },
1005       "delete": {
1006         "tags": [
1007           "Climate_history"
1008         ],
1009         "summary": "Delete Climate History",
1010         "operationId": "delete_climate_history_climate_history__climate_history_id__delete",
1011         "parameters": [
1012           {
1013             "required": true,
1014             "schema": {
1015               "title": "Climate History Id",
1016               "type": "integer"
1017             },
1018             "name": "climate_history_id",
1019             "in": "path"
1020           }
1021         ],
1022         "responses": {
1023           "200": {
1024             "description": "Successful Response",
1025             "content": {
1026               "application/json": {
1027                 "schema": {
1028                   "$ref": "#/components/schemas/ClimateHistoryBase"
1029                 }
1030               }
1031             }
1032           },
1033           "422": {
1034             "description": "Validation Error",
1035             "content": {
1036               "application/json": {
1037                 "schema": {
1038                   "$ref": "#/components/schemas/HTTPValidationError"
1039                 }
1040               }
1041             }
1042           }
1043         }
1044       }
1045     },
1046     "/climate_needs/": {
1047       "post": {
1048         "tags": [
1049           "Climate_needs"
1050         ],
1051         "summary": "Create Climate Needs",
1052         "operationId": "create_climate_needs_climate_needs__post",
1053         "requestBody": {
1054           "content": {
1055             "application/json": {
1056               "schema": {
1057                 "$ref": "#/components/schemas/ClimateNeedsCreate"
1058               }
1059             }
1060           },
1061           "required": true
1062         },
1063         "responses": {
1064           "200": {
1065             "description": "Successful Response",
1066             "content": {
1067               "application/json": {
1068                 "schema": {
1069                   "$ref": "#/components/schemas/ClimateNeedsBase"
1070                 }
1071               }
1072             }
1073           },
1074           "422": {
1075             "description": "Validation Error",
1076             "content": {
1077               "application/json": {
1078                 "schema": {
1079                   "$ref": "#/components/schemas/HTTPValidationError"
1080                 }
1081               }
1082             }
1083           }
1084         }
1085       }
1086     },
1087     "/climate_needs/{climate_needs_id}": {
1088       "get": {
1089         "tags": [
1090           "Climate_needs"
1091         ],
1092         "summary": "Read Climate Needs",
1093         "operationId": "read_climate_needs_climate_needs__climate_needs_id__get",
1094         "parameters": [
1095           {
1096             "required": true,
1097             "schema": {
1098               "title": "Climate Needs Id",
1099               "type": "integer"
1100             },
1101             "name": "climate_needs_id",
1102             "in": "path"
1103           }
1104         ],
1105         "responses": {
1106           "200": {
1107             "description": "Successful Response",
1108             "content": {
1109               "application/json": {
1110                 "schema": {
1111                   "$ref": "#/components/schemas/ClimateNeedsBase"
1112                 }
1113               }
1114             }
1115           },
1116           "422": {
1117             "description": "Validation Error",
1118             "content": {
1119               "application/json": {
1120                 "schema": {
1121                   "$ref": "#/components/schemas/HTTPValidationError"
1122                 }
1123               }
1124             }
1125           }
1126         }
1127       },
1128       "put": {
1129         "tags": [
1130           "Climate_needs"
1131         ],
1132         "summary": "Update Climate Needs",
1133         "operationId": "update_climate_needs_climate_needs__climate_needs_id__put",
1134         "parameters": [
1135           {
1136             "required": true,
1137             "schema": {
1138               "title": "Climate Needs Id",
1139               "type": "integer"
1140             },
1141             "name": "climate_needs_id",
1142             "in": "path"
1143           }
1144         ],
1145         "requestBody": {
1146           "content": {
1147             "application/json": {
1148               "schema": {
1149                 "$ref": "#/components/schemas/ClimateNeedsUpdate"
1150               }
1151             }
1152           },
1153           "required": true
1154         },
1155         "responses": {
1156           "200": {
1157             "description": "Successful Response",
1158             "content": {
1159               "application/json": {
1160                 "schema": {
1161                   "$ref": "#/components/schemas/ClimateNeedsBase"
1162                 }
1163               }
1164             }
1165           },
1166           "422": {
1167             "description": "Validation Error",
1168             "content": {
1169               "application/json": {
1170                 "schema": {
1171                   "$ref": "#/components/schemas/HTTPValidationError"
1172                 }
1173               }
1174             }
1175           }
1176         }
1177       },
1178       "delete": {
1179         "tags": [
1180           "Climate_needs"
1181         ],
1182         "summary": "Delete Climate Needs",
1183         "operationId": "delete_climate_needs_climate_needs__climate_needs_id__delete",
1184         "parameters": [
1185           {
1186             "required": true,
1187             "schema": {
1188               "title": "Climate Needs Id",
1189               "type": "integer"
1190             },
1191             "name": "climate_needs_id",
1192             "in": "path"
1193           }
1194         ],
1195         "responses": {
1196           "200": {
1197             "description": "Successful Response",
1198             "content": {
1199               "application/json": {
1200                 "schema": {
1201                   "$ref": "#/components/schemas/ClimateNeedsBase"
1202                 }
1203               }
1204             }
1205           },
1206           "422": {
1207             "description": "Validation Error",
1208             "content": {
1209               "application/json": {
1210                 "schema": {
1211                   "$ref": "#/components/schemas/HTTPValidationError"
1212                 }
1213               }
1214             }
1215           }
1216         }
1217       }
1218     },
1219     "/animal_needs/": {
1220       "post": {
1221         "tags": [
1222           "Animal_needs"
1223         ],
1224         "summary": "Create Animal Needs",
1225         "operationId": "create_animal_needs_animal_needs__post",
1226         "requestBody": {
1227           "content": {
1228             "application/json": {
1229               "schema": {
1230                 "$ref": "#/components/schemas/AnimalNeedsCreate"
1231               }
1232             }
1233           },
1234           "required": true
1235         },
1236         "responses": {
1237           "200": {
1238             "description": "Successful Response",
1239             "content": {
1240               "application/json": {
1241                 "schema": {
1242                   "$ref": "#/components/schemas/AnimalNeedsBase"
1243                 }
1244               }
1245             }
1246           },
1247           "422": {
1248             "description": "Validation Error",
1249             "content": {
1250               "application/json": {
1251                 "schema": {
1252                   "$ref": "#/components/schemas/HTTPValidationError"
1253                 }
1254               }
1255             }
1256           }
1257         }
1258       }
1259     },
1260     "/animal_needs/{animal_needs_id}": {
1261       "get": {
1262         "tags": [
1263           "Animal_needs"
1264         ],
1265         "summary": "Read Animal Needs",
1266         "operationId": "read_animal_needs_animal_needs__animal_needs_id__get",
1267         "parameters": [
1268           {
1269             "required": true,
1270             "schema": {
1271               "title": "Animal Needs Id",
1272               "type": "integer"
1273             },
1274             "name": "animal_needs_id",
1275             "in": "path"
1276           }
1277         ],
1278         "responses": {
1279           "200": {
1280             "description": "Successful Response",
1281             "content": {
1282               "application/json": {
1283                 "schema": {
1284                   "$ref": "#/components/schemas/AnimalNeedsBase"
1285                 }
1286               }
1287             }
1288           },
1289           "422": {
1290             "description": "Validation Error",
1291             "content": {
1292               "application/json": {
1293                 "schema": {
1294                   "$ref": "#/components/schemas/HTTPValidationError"
1295                 }
1296               }
1297             }
1298           }
1299         }
1300       },
1301       "put": {
1302         "tags": [
1303           "Animal_needs"
1304         ],
1305         "summary": "Update Animal Needs",
1306         "operationId": "update_animal_needs_animal_needs__animal_needs_id__put",
1307         "parameters": [
1308           {
1309             "required": true,
1310             "schema": {
1311               "title": "Animal Needs Id",
1312               "type": "integer"
1313             },
1314             "name": "animal_needs_id",
1315             "in": "path"
1316           }
1317         ],
1318         "requestBody": {
1319           "content": {
1320             "application/json": {
1321               "schema": {
1322                 "$ref": "#/components/schemas/AnimalNeedsUpdate"
1323               }
1324             }
1325           },
1326           "required": true
1327         },
1328         "responses": {
1329           "200": {
1330             "description": "Successful Response",
1331             "content": {
1332               "application/json": {
1333                 "schema": {
1334                   "$ref": "#/components/schemas/AnimalNeedsBase"
1335                 }
1336               }
1337             }
1338           },
1339           "422": {
1340             "description": "Validation Error",
1341             "content": {
1342               "application/json": {
1343                 "schema": {
1344                   "$ref": "#/components/schemas/HTTPValidationError"
1345                 }
1346               }
1347             }
1348           }
1349         }
1350       },
1351       "delete": {
1352         "tags": [
1353           "Animal_needs"
1354         ],
1355         "summary": "Delete Animal Needs",
1356         "operationId": "delete_animal_needs_animal_needs__animal_needs_id__delete",
1357         "parameters": [
1358           {
1359             "required": true,
1360             "schema": {
1361               "title": "Animal Needs Id",
1362               "type": "integer"
1363             },
1364             "name": "animal_needs_id",
1365             "in": "path"
1366           }
1367         ],
1368         "responses": {
1369           "200": {
1370             "description": "Successful Response",
1371             "content": {
1372               "application/json": {
1373                 "schema": {
1374                   "$ref": "#/components/schemas/AnimalNeedsBase"
1375                 }
1376               }
1377             }
1378           },
1379           "422": {
1380             "description": "Validation Error",
1381             "content": {
1382               "application/json": {
1383                 "schema": {
1384                   "$ref": "#/components/schemas/HTTPValidationError"
1385                 }
1386               }
1387             }
1388           }
1389         }
1390       }
1391     },
1392     "/notifications/": {
1393       "post": {
1394         "tags": [
1395           "Notifications"
1396         ],
1397         "summary": "Create Notification",
1398         "operationId": "create_notification_notifications__post",
1399         "requestBody": {
1400           "content": {
1401             "application/json": {
1402               "schema": {
1403                 "$ref": "#/components/schemas/NotificationCreate"
1404               }
1405             }
1406           },
1407           "required": true
1408         },
1409         "responses": {
1410           "200": {
1411             "description": "Successful Response",
1412             "content": {
1413               "application/json": {
1414                 "schema": {
1415                   "$ref": "#/components/schemas/NotificationBase"
1416                 }
1417               }
1418             }
1419           },
1420           "422": {
1421             "description": "Validation Error",
1422             "content": {
1423               "application/json": {
1424                 "schema": {
1425                   "$ref": "#/components/schemas/HTTPValidationError"
1426                 }
1427               }
1428             }
1429           }
1430         }
1431       }
1432     },
1433     "/notifications/{notification_id}": {
1434       "get": {
1435         "tags": [
1436           "Notifications"
1437         ],
1438         "summary": "Read Notification",
1439         "operationId": "read_notification_notifications__notification_id__get",
1440         "parameters": [
1441           {
1442             "required": true,
1443             "schema": {
1444               "title": "Notification Id",
1445               "type": "integer"
1446             },
1447             "name": "notification_id",
1448             "in": "path"
1449           }
1450         ],
1451         "responses": {
1452           "200": {
1453             "description": "Successful Response",
1454             "content": {
1455               "application/json": {
1456                 "schema": {
1457                   "$ref": "#/components/schemas/NotificationBase"
1458                 }
1459               }
1460             }
1461           },
1462           "422": {
1463             "description": "Validation Error",
1464             "content": {
1465               "application/json": {
1466                 "schema": {
1467                   "$ref": "#/components/schemas/HTTPValidationError"
1468                 }
1469               }
1470             }
1471           }
1472         }
1473       },
1474       "put": {
1475         "tags": [
1476           "Notifications"
1477         ],
1478         "summary": "Update Notification",
1479         "operationId": "update_notification_notifications__notification_id__put",
1480         "parameters": [
1481           {
1482             "required": true,
1483             "schema": {
1484               "title": "Notification Id",
1485               "type": "integer"
1486             },
1487             "name": "notification_id",
1488             "in": "path"
1489           }
1490         ],
1491         "requestBody": {
1492           "content": {
1493             "application/json": {
1494               "schema": {
1495                 "$ref": "#/components/schemas/NotificationUpdate"
1496               }
1497             }
1498           },
1499           "required": true
1500         },
1501         "responses": {
1502           "200": {
1503             "description": "Successful Response",
1504             "content": {
1505               "application/json": {
1506                 "schema": {
1507                   "$ref": "#/components/schemas/NotificationBase"
1508                 }
1509               }
1510             }
1511           },
1512           "422": {
1513             "description": "Validation Error",
1514             "content": {
1515               "application/json": {
1516                 "schema": {
1517                   "$ref": "#/components/schemas/HTTPValidationError"
1518                 }
1519               }
1520             }
1521           }
1522         }
1523       },
1524       "delete": {
1525         "tags": [
1526           "Notifications"
1527         ],
1528         "summary": "Delete Notification",
1529         "operationId": "delete_notification_notifications__notification_id__delete",
1530         "parameters": [
1531           {
1532             "required": true,
1533             "schema": {
1534               "title": "Notification Id",
1535               "type": "integer"
1536             },
1537             "name": "notification_id",
1538             "in": "path"
1539           }
1540         ],
1541         "responses": {
1542           "200": {
1543             "description": "Successful Response",
1544             "content": {
1545               "application/json": {
1546                 "schema": {
1547                   "$ref": "#/components/schemas/NotificationBase"
1548                 }
1549               }
1550             }
1551           },
1552           "422": {
1553             "description": "Validation Error",
1554             "content": {
1555               "application/json": {
1556                 "schema": {
1557                   "$ref": "#/components/schemas/HTTPValidationError"
1558                 }
1559               }
1560             }
1561           }
1562         }
1563       }
1564     },
1565     "/sensors/": {
1566       "post": {
1567         "tags": [
1568           "Sensors"
1569         ],
1570         "summary": "Create Sensor",
1571         "operationId": "create_sensor_sensors__post",
1572         "requestBody": {
1573           "content": {
1574             "application/json": {
1575               "schema": {
1576                 "$ref": "#/components/schemas/SensorCreate"
1577               }
1578             }
1579           },
1580           "required": true
1581         },
1582         "responses": {
1583           "200": {
1584             "description": "Successful Response",
1585             "content": {
1586               "application/json": {
1587                 "schema": {
1588                   "$ref": "#/components/schemas/SensorBase"
1589                 }
1590               }
1591             }
1592           },
1593           "422": {
1594             "description": "Validation Error",
1595             "content": {
1596               "application/json": {
1597                 "schema": {
1598                   "$ref": "#/components/schemas/HTTPValidationError"
1599                 }
1600               }
1601             }
1602           }
1603         }
1604       }
1605     },
1606     "/sensors/{sensor_id}": {
1607       "get": {
1608         "tags": [
1609           "Sensors"
1610         ],
1611         "summary": "Read Sensor",
1612         "operationId": "read_sensor_sensors__sensor_id__get",
1613         "parameters": [
1614           {
1615             "required": true,
1616             "schema": {
1617               "title": "Sensor Id",
1618               "type": "integer"
1619             },
1620             "name": "sensor_id",
1621             "in": "path"
1622           }
1623         ],
1624         "responses": {
1625           "200": {
1626             "description": "Successful Response",
1627             "content": {
1628               "application/json": {
1629                 "schema": {
1630                   "$ref": "#/components/schemas/SensorBase"
1631                 }
1632               }
1633             }
1634           },
1635           "422": {
1636             "description": "Validation Error",
1637             "content": {
1638               "application/json": {
1639                 "schema": {
1640                   "$ref": "#/components/schemas/HTTPValidationError"
1641                 }
1642               }
1643             }
1644           }
1645         }
1646       },
1647       "put": {
1648         "tags": [
1649           "Sensors"
1650         ],
1651         "summary": "Update Sensor",
1652         "operationId": "update_sensor_sensors__sensor_id__put",
1653         "parameters": [
1654           {
1655             "required": true,
1656             "schema": {
1657               "title": "Sensor Id",
1658               "type": "integer"
1659             },
1660             "name": "sensor_id",
1661             "in": "path"
1662           }
1663         ],
1664         "requestBody": {
1665           "content": {
1666             "application/json": {
1667               "schema": {
1668                 "$ref": "#/components/schemas/SensorUpdate"
1669               }
1670             }
1671           },
1672           "required": true
1673         },
1674         "responses": {
1675           "200": {
1676             "description": "Successful Response",
1677             "content": {
1678               "application/json": {
1679                 "schema": {
1680                   "$ref": "#/components/schemas/SensorBase"
1681                 }
1682               }
1683             }
1684           },
1685           "422": {
1686             "description": "Validation Error",
1687             "content": {
1688               "application/json": {
1689                 "schema": {
1690                   "$ref": "#/components/schemas/HTTPValidationError"
1691                 }
1692               }
1693             }
1694           }
1695         }
1696       },
1697       "delete": {
1698         "tags": [
1699           "Sensors"
1700         ],
1701         "summary": "Delete Sensor",
1702         "operationId": "delete_sensor_sensors__sensor_id__delete",
1703         "parameters": [
1704           {
1705             "required": true,
1706             "schema": {
1707               "title": "Sensor Id",
1708               "type": "integer"
1709             },
1710             "name": "sensor_id",
1711             "in": "path"
1712           }
1713         ],
1714         "responses": {
1715           "200": {
1716             "description": "Successful Response",
1717             "content": {
1718               "application/json": {
1719                 "schema": {
1720                   "$ref": "#/components/schemas/SensorBase"
1721                 }
1722               }
1723             }
1724           },
1725           "422": {
1726             "description": "Validation Error",
1727             "content": {
1728               "application/json": {
1729                 "schema": {
1730                   "$ref": "#/components/schemas/HTTPValidationError"
1731                 }
1732               }
1733             }
1734           }
1735         }
1736       }
1737     },
1738     "/shop_supplies/": {
1739       "post": {
1740         "tags": [
1741           "Shop_supplies"
1742         ],
1743         "summary": "Create Shop Supplies",
1744         "operationId": "create_shop_supplies_shop_supplies__post",
1745         "requestBody": {
1746           "content": {
1747             "application/json": {
1748               "schema": {
1749                 "$ref": "#/components/schemas/ShopSuppliesCreate"
1750               }
1751             }
1752           },
1753           "required": true
1754         },
1755         "responses": {
1756           "200": {
1757             "description": "Successful Response",
1758             "content": {
1759               "application/json": {
1760                 "schema": {
1761                   "$ref": "#/components/schemas/ShopSuppliesBase"
1762                 }
1763               }
1764             }
1765           },
1766           "422": {
1767             "description": "Validation Error",
1768             "content": {
1769               "application/json": {
1770                 "schema": {
1771                   "$ref": "#/components/schemas/HTTPValidationError"
1772                 }
1773               }
1774             }
1775           }
1776         }
1777       }
1778     },
1779     "/shop_supplies/{shop_supplies_id}": {
1780       "get": {
1781         "tags": [
1782           "Shop_supplies"
1783         ],
1784         "summary": "Read Shop Supplies",
1785         "operationId": "read_shop_supplies_shop_supplies__shop_supplies_id__get",
1786         "parameters": [
1787           {
1788             "required": true,
1789             "schema": {
1790               "title": "Shop Supplies Id",
1791               "type": "integer"
1792             },
1793             "name": "shop_supplies_id",
1794             "in": "path"
1795           }
1796         ],
1797         "responses": {
1798           "200": {
1799             "description": "Successful Response",
1800             "content": {
1801               "application/json": {
1802                 "schema": {
1803                   "$ref": "#/components/schemas/ShopSuppliesBase"
1804                 }
1805               }
1806             }
1807           },
1808           "422": {
1809             "description": "Validation Error",
1810             "content": {
1811               "application/json": {
1812                 "schema": {
1813                   "$ref": "#/components/schemas/HTTPValidationError"
1814                 }
1815               }
1816             }
1817           }
1818         }
1819       },
1820       "put": {
1821         "tags": [
1822           "Shop_supplies"
1823         ],
1824         "summary": "Update Shop Supplies",
1825         "operationId": "update_shop_supplies_shop_supplies__shop_supplies_id__put",
1826         "parameters": [
1827           {
1828             "required": true,
1829             "schema": {
1830               "title": "Shop Supplies Id",
1831               "type": "integer"
1832             },
1833             "name": "shop_supplies_id",
1834             "in": "path"
1835           }
1836         ],
1837         "requestBody": {
1838           "content": {
1839             "application/json": {
1840               "schema": {
1841                 "$ref": "#/components/schemas/ShopSuppliesUpdate"
1842               }
1843             }
1844           },
1845           "required": true
1846         },
1847         "responses": {
1848           "200": {
1849             "description": "Successful Response",
1850             "content": {
1851               "application/json": {
1852                 "schema": {
1853                   "$ref": "#/components/schemas/ShopSuppliesBase"
1854                 }
1855               }
1856             }
1857           },
1858           "422": {
1859             "description": "Validation Error",
1860             "content": {
1861               "application/json": {
1862                 "schema": {
1863                   "$ref": "#/components/schemas/HTTPValidationError"
1864                 }
1865               }
1866             }
1867           }
1868         }
1869       },
1870       "delete": {
1871         "tags": [
1872           "Shop_supplies"
1873         ],
1874         "summary": "Delete Shop Supplies",
1875         "operationId": "delete_shop_supplies_shop_supplies__shop_supplies_id__delete",
1876         "parameters": [
1877           {
1878             "required": true,
1879             "schema": {
1880               "title": "Shop Supplies Id",
1881               "type": "integer"
1882             },
1883             "name": "shop_supplies_id",
1884             "in": "path"
1885           }
1886         ],
1887         "responses": {
1888           "200": {
1889             "description": "Successful Response",
1890             "content": {
1891               "application/json": {
1892                 "schema": {
1893                   "$ref": "#/components/schemas/ShopSuppliesBase"
1894                 }
1895               }
1896             }
1897           },
1898           "422": {
1899             "description": "Validation Error",
1900             "content": {
1901               "application/json": {
1902                 "schema": {
1903                   "$ref": "#/components/schemas/HTTPValidationError"
1904                 }
1905               }
1906             }
1907           }
1908         }
1909       }
1910     },
1911     "/shops/": {
1912       "post": {
1913         "tags": [
1914           "Shops"
1915         ],
1916         "summary": "Create Shop",
1917         "operationId": "create_shop_shops__post",
1918         "requestBody": {
1919           "content": {
1920             "application/json": {
1921               "schema": {
1922                 "$ref": "#/components/schemas/ShopCreate"
1923               }
1924             }
1925           },
1926           "required": true
1927         },
1928         "responses": {
1929           "200": {
1930             "description": "Successful Response",
1931             "content": {
1932               "application/json": {
1933                 "schema": {
1934                   "$ref": "#/components/schemas/ShopBase"
1935                 }
1936               }
1937             }
1938           },
1939           "422": {
1940             "description": "Validation Error",
1941             "content": {
1942               "application/json": {
1943                 "schema": {
1944                   "$ref": "#/components/schemas/HTTPValidationError"
1945                 }
1946               }
1947             }
1948           }
1949         }
1950       }
1951     },
1952     "/shops/{shop_id}": {
1953       "get": {
1954         "tags": [
1955           "Shops"
1956         ],
1957         "summary": "Read Shop",
1958         "operationId": "read_shop_shops__shop_id__get",
1959         "parameters": [
1960           {
1961             "required": true,
1962             "schema": {
1963               "title": "Shop Id",
1964               "type": "integer"
1965             },
1966             "name": "shop_id",
1967             "in": "path"
1968           }
1969         ],
1970         "responses": {
1971           "200": {
1972             "description": "Successful Response",
1973             "content": {
1974               "application/json": {
1975                 "schema": {
1976                   "$ref": "#/components/schemas/ShopBase"
1977                 }
1978               }
1979             }
1980           },
1981           "422": {
1982             "description": "Validation Error",
1983             "content": {
1984               "application/json": {
1985                 "schema": {
1986                   "$ref": "#/components/schemas/HTTPValidationError"
1987                 }
1988               }
1989             }
1990           }
1991         }
1992       },
1993       "put": {
1994         "tags": [
1995           "Shops"
1996         ],
1997         "summary": "Update Shop",
1998         "operationId": "update_shop_shops__shop_id__put",
1999         "parameters": [
2000           {
2001             "required": true,
2002             "schema": {
2003               "title": "Shop Id",
2004               "type": "integer"
2005             },
2006             "name": "shop_id",
2007             "in": "path"
2008           }
2009         ],
2010         "requestBody": {
2011           "content": {
2012             "application/json": {
2013               "schema": {
2014                 "$ref": "#/components/schemas/ShopUpdate"
2015               }
2016             }
2017           },
2018           "required": true
2019         },
2020         "responses": {
2021           "200": {
2022             "description": "Successful Response",
2023             "content": {
2024               "application/json": {
2025                 "schema": {
2026                   "$ref": "#/components/schemas/ShopBase"
2027                 }
2028               }
2029             }
2030           },
2031           "422": {
2032             "description": "Validation Error",
2033             "content": {
2034               "application/json": {
2035                 "schema": {
2036                   "$ref": "#/components/schemas/HTTPValidationError"
2037                 }
2038               }
2039             }
2040           }
2041         }
2042       },
2043       "delete": {
2044         "tags": [
2045           "Shops"
2046         ],
2047         "summary": "Delete Shop",
2048         "operationId": "delete_shop_shops__shop_id__delete",
2049         "parameters": [
2050           {
2051             "required": true,
2052             "schema": {
2053               "title": "Shop Id",
2054               "type": "integer"
2055             },
2056             "name": "shop_id",
2057             "in": "path"
2058           }
2059         ],
2060         "responses": {
2061           "200": {
2062             "description": "Successful Response",
2063             "content": {
2064               "application/json": {
2065                 "schema": {
2066                   "$ref": "#/components/schemas/ShopBase"
2067                 }
2068               }
2069             }
2070           },
2071           "422": {
2072             "description": "Validation Error",
2073             "content": {
2074               "application/json": {
2075                 "schema": {
2076                   "$ref": "#/components/schemas/HTTPValidationError"
2077                 }
2078               }
2079             }
2080           }
2081         }
2082       }
2083     },
2084     "/user_in_shop/": {
2085       "post": {
2086         "tags": [
2087           "User_in_shop"
2088         ],
2089         "summary": "Create User In Shop",
2090         "operationId": "create_user_in_shop_user_in_shop__post",
2091         "requestBody": {
2092           "content": {
2093             "application/json": {
2094               "schema": {
2095                 "$ref": "#/components/schemas/UserInShopCreate"
2096               }
2097             }
2098           },
2099           "required": true
2100         },
2101         "responses": {
2102           "200": {
2103             "description": "Successful Response",
2104             "content": {
2105               "application/json": {
2106                 "schema": {
2107                   "$ref": "#/components/schemas/UserInShopBase"
2108                 }
2109               }
2110             }
2111           },
2112           "422": {
2113             "description": "Validation Error",
2114             "content": {
2115               "application/json": {
2116                 "schema": {
2117                   "$ref": "#/components/schemas/HTTPValidationError"
2118                 }
2119               }
2120             }
2121           }
2122         }
2123       }
2124     },
2125     "/user_in_shop/{user_in_shop_id}": {
2126       "get": {
2127         "tags": [
2128           "User_in_shop"
2129         ],
2130         "summary": "Read User In Shop",
2131         "operationId": "read_user_in_shop_user_in_shop__user_in_shop_id__get",
2132         "parameters": [
2133           {
2134             "required": true,
2135             "schema": {
2136               "title": "User In Shop Id",
2137               "type": "integer"
2138             },
2139             "name": "user_in_shop_id",
2140             "in": "path"
2141           }
2142         ],
2143         "responses": {
2144           "200": {
2145             "description": "Successful Response",
2146             "content": {
2147               "application/json": {
2148                 "schema": {
2149                   "$ref": "#/components/schemas/UserInShopBase"
2150                 }
2151               }
2152             }
2153           },
2154           "422": {
2155             "description": "Validation Error",
2156             "content": {
2157               "application/json": {
2158                 "schema": {
2159                   "$ref": "#/components/schemas/HTTPValidationError"
2160                 }
2161               }
2162             }
2163           }
2164         }
2165       },
2166       "put": {
2167         "tags": [
2168           "User_in_shop"
2169         ],
2170         "summary": "Update User In Shop",
2171         "operationId": "update_user_in_shop_user_in_shop__user_in_shop_id__put",
2172         "parameters": [
2173           {
2174             "required": true,
2175             "schema": {
2176               "title": "User In Shop Id",
2177               "type": "integer"
2178             },
2179             "name": "user_in_shop_id",
2180             "in": "path"
2181           }
2182         ],
2183         "requestBody": {
2184           "content": {
2185             "application/json": {
2186               "schema": {
2187                 "$ref": "#/components/schemas/UserInShopUpdate"
2188               }
2189             }
2190           },
2191           "required": true
2192         },
2193         "responses": {
2194           "200": {
2195             "description": "Successful Response",
2196             "content": {
2197               "application/json": {
2198                 "schema": {
2199                   "$ref": "#/components/schemas/UserInShopBase"
2200                 }
2201               }
2202             }
2203           },
2204           "422": {
2205             "description": "Validation Error",
2206             "content": {
2207               "application/json": {
2208                 "schema": {
2209                   "$ref": "#/components/schemas/HTTPValidationError"
2210                 }
2211               }
2212             }
2213           }
2214         }
2215       },
2216       "delete": {
2217         "tags": [
2218           "User_in_shop"
2219         ],
2220         "summary": "Delete User In Shop",
2221         "operationId": "delete_user_in_shop_user_in_shop__user_in_shop_id__delete",
2222         "parameters": [
2223           {
2224             "required": true,
2225             "schema": {
2226               "title": "User In Shop Id",
2227               "type": "integer"
2228             },
2229             "name": "user_in_shop_id",
2230             "in": "path"
2231           }
2232         ],
2233         "responses": {
2234           "200": {
2235             "description": "Successful Response",
2236             "content": {
2237               "application/json": {
2238                 "schema": {
2239                   "$ref": "#/components/schemas/UserInShopBase"
2240                 }
2241               }
2242             }
2243           },
2244           "422": {
2245             "description": "Validation Error",
2246             "content": {
2247               "application/json": {
2248                 "schema": {
2249                   "$ref": "#/components/schemas/HTTPValidationError"
2250                 }
2251               }
2252             }
2253           }
2254         }
2255       }
2256     },
2257     "/supplies/": {
2258       "post": {
2259         "tags": [
2260           "Supplies"
2261         ],
2262         "summary": "Create Supplies",
2263         "operationId": "create_supplies_supplies__post",
2264         "requestBody": {
2265           "content": {
2266             "application/json": {
2267               "schema": {
2268                 "$ref": "#/components/schemas/SuppliesCreate"
2269               }
2270             }
2271           },
2272           "required": true
2273         },
2274         "responses": {
2275           "200": {
2276             "description": "Successful Response",
2277             "content": {
2278               "application/json": {
2279                 "schema": {
2280                   "$ref": "#/components/schemas/SuppliesBase"
2281                 }
2282               }
2283             }
2284           },
2285           "422": {
2286             "description": "Validation Error",
2287             "content": {
2288               "application/json": {
2289                 "schema": {
2290                   "$ref": "#/components/schemas/HTTPValidationError"
2291                 }
2292               }
2293             }
2294           }
2295         }
2296       }
2297     },
2298     "/supplies/{supplies_id}": {
2299       "get": {
2300         "tags": [
2301           "Supplies"
2302         ],
2303         "summary": "Read Supplies",
2304         "operationId": "read_supplies_supplies__supplies_id__get",
2305         "parameters": [
2306           {
2307             "required": true,
2308             "schema": {
2309               "title": "Supplies Id",
2310               "type": "integer"
2311             },
2312             "name": "supplies_id",
2313             "in": "path"
2314           }
2315         ],
2316         "responses": {
2317           "200": {
2318             "description": "Successful Response",
2319             "content": {
2320               "application/json": {
2321                 "schema": {
2322                   "$ref": "#/components/schemas/SuppliesBase"
2323                 }
2324               }
2325             }
2326           },
2327           "422": {
2328             "description": "Validation Error",
2329             "content": {
2330               "application/json": {
2331                 "schema": {
2332                   "$ref": "#/components/schemas/HTTPValidationError"
2333                 }
2334               }
2335             }
2336           }
2337         }
2338       },
2339       "put": {
2340         "tags": [
2341           "Supplies"
2342         ],
2343         "summary": "Update Supplies",
2344         "operationId": "update_supplies_supplies__supplies_id__put",
2345         "parameters": [
2346           {
2347             "required": true,
2348             "schema": {
2349               "title": "Supplies Id",
2350               "type": "integer"
2351             },
2352             "name": "supplies_id",
2353             "in": "path"
2354           }
2355         ],
2356         "requestBody": {
2357           "content": {
2358             "application/json": {
2359               "schema": {
2360                 "$ref": "#/components/schemas/SuppliesUpdate"
2361               }
2362             }
2363           },
2364           "required": true
2365         },
2366         "responses": {
2367           "200": {
2368             "description": "Successful Response",
2369             "content": {
2370               "application/json": {
2371                 "schema": {
2372                   "$ref": "#/components/schemas/SuppliesBase"
2373                 }
2374               }
2375             }
2376           },
2377           "422": {
2378             "description": "Validation Error",
2379             "content": {
2380               "application/json": {
2381                 "schema": {
2382                   "$ref": "#/components/schemas/HTTPValidationError"
2383                 }
2384               }
2385             }
2386           }
2387         }
2388       },
2389       "delete": {
2390         "tags": [
2391           "Supplies"
2392         ],
2393         "summary": "Delete Supplies",
2394         "operationId": "delete_supplies_supplies__supplies_id__delete",
2395         "parameters": [
2396           {
2397             "required": true,
2398             "schema": {
2399               "title": "Supplies Id",
2400               "type": "integer"
2401             },
2402             "name": "supplies_id",
2403             "in": "path"
2404           }
2405         ],
2406         "responses": {
2407           "200": {
2408             "description": "Successful Response",
2409             "content": {
2410               "application/json": {
2411                 "schema": {
2412                   "$ref": "#/components/schemas/SuppliesBase"
2413                 }
2414               }
2415             }
2416           },
2417           "422": {
2418             "description": "Validation Error",
2419             "content": {
2420               "application/json": {
2421                 "schema": {
2422                   "$ref": "#/components/schemas/HTTPValidationError"
2423                 }
2424               }
2425             }
2426           }
2427         }
2428       }
2429     },
2430     "/": {
2431       "get": {
2432         "summary": "Read Root",
2433         "operationId": "read_root__get",
2434         "responses": {
2435           "200": {
2436             "description": "Successful Response",
2437             "content": {
2438               "application/json": {
2439                 "schema": {
2440 
2441                 }
2442               }
2443             }
2444           }
2445         }
2446       }
2447     }
2448   },
2449   "components": {
2450     "schemas": {
2451       "AnimalBase": {
2452         "title": "AnimalBase",
2453         "required": [
2454           "animal_id",
2455           "name",
2456           "species",
2457           "breed",
2458           "age",
2459           "sex",
2460           "weight",
2461           "health_info",
2462           "shop_id"
2463         ],
2464         "type": "object",
2465         "properties": {
2466           "animal_id": {
2467             "title": "Animal Id",
2468             "type": "integer"
2469           },
2470           "name": {
2471             "title": "Name",
2472             "type": "string"
2473           },
2474           "species": {
2475             "title": "Species",
2476             "type": "string"
2477           },
2478           "breed": {
2479             "title": "Breed",
2480             "type": "string"
2481           },
2482           "age": {
2483             "title": "Age",
2484             "type": "integer"
2485           },
2486           "sex": {
2487             "title": "Sex",
2488             "type": "string"
2489           },
2490           "weight": {
2491             "title": "Weight",
2492             "type": "number"
2493           },
2494           "health_info": {
2495             "title": "Health Info",
2496             "type": "string"
2497           },
2498           "shop_id": {
2499             "title": "Shop Id",
2500             "type": "integer"
2501           }
2502         }
2503       },
2504       "AnimalCreate": {
2505         "title": "AnimalCreate",
2506         "required": [
2507           "animal_id",
2508           "name",
2509           "species",
2510           "breed",
2511           "age",
2512           "sex",
2513           "weight",
2514           "health_info",
2515           "shop_id"
2516         ],
2517         "type": "object",
2518         "properties": {
2519           "animal_id": {
2520             "title": "Animal Id",
2521             "type": "integer"
2522           },
2523           "name": {
2524             "title": "Name",
2525             "type": "string"
2526           },
2527           "species": {
2528             "title": "Species",
2529             "type": "string"
2530           },
2531           "breed": {
2532             "title": "Breed",
2533             "type": "string"
2534           },
2535           "age": {
2536             "title": "Age",
2537             "type": "integer"
2538           },
2539           "sex": {
2540             "title": "Sex",
2541             "type": "string"
2542           },
2543           "weight": {
2544             "title": "Weight",
2545             "type": "number"
2546           },
2547           "health_info": {
2548             "title": "Health Info",
2549             "type": "string"
2550           },
2551           "shop_id": {
2552             "title": "Shop Id",
2553             "type": "integer"
2554           }
2555         }
2556       },
2557       "AnimalFeedingBase": {
2558         "title": "AnimalFeedingBase",
2559         "required": [
2560           "animal_id",
2561           "feeding_id",
2562           "feeding_time",
2563           "food_weight"
2564         ],
2565         "type": "object",
2566         "properties": {
2567           "animal_id": {
2568             "title": "Animal Id",
2569             "type": "integer"
2570           },
2571           "feeding_id": {
2572             "title": "Feeding Id",
2573             "type": "integer"
2574           },
2575           "feeding_time": {
2576             "title": "Feeding Time",
2577             "type": "string",
2578             "format": "date-time"
2579           },
2580           "food_weight": {
2581             "title": "Food Weight",
2582             "type": "number"
2583           }
2584         }
2585       },
2586       "AnimalFeedingCreate": {
2587         "title": "AnimalFeedingCreate",
2588         "required": [
2589           "animal_id",
2590           "feeding_id",
2591           "feeding_time",
2592           "food_weight"
2593         ],
2594         "type": "object",
2595         "properties": {
2596           "animal_id": {
2597             "title": "Animal Id",
2598             "type": "integer"
2599           },
2600           "feeding_id": {
2601             "title": "Feeding Id",
2602             "type": "integer"
2603           },
2604           "feeding_time": {
2605             "title": "Feeding Time",
2606             "type": "string",
2607             "format": "date-time"
2608           },
2609           "food_weight": {
2610             "title": "Food Weight",
2611             "type": "number"
2612           }
2613         }
2614       },
2615       "AnimalFeedingUpdate": {
2616         "title": "AnimalFeedingUpdate",
2617         "required": [
2618           "animal_id",
2619           "feeding_id",
2620           "feeding_time",
2621           "food_weight"
2622         ],
2623         "type": "object",
2624         "properties": {
2625           "animal_id": {
2626             "title": "Animal Id",
2627             "type": "integer"
2628           },
2629           "feeding_id": {
2630             "title": "Feeding Id",
2631             "type": "integer"
2632           },
2633           "feeding_time": {
2634             "title": "Feeding Time",
2635             "type": "string",
2636             "format": "date-time"
2637           },
2638           "food_weight": {
2639             "title": "Food Weight",
2640             "type": "number"
2641           }
2642         }
2643       },
2644       "AnimalNeedsBase": {
2645         "title": "AnimalNeedsBase",
2646         "required": [
2647           "animal_id",
2648           "need_id",
2649           "features"
2650         ],
2651         "type": "object",
2652         "properties": {
2653           "animal_id": {
2654             "title": "Animal Id",
2655             "type": "integer"
2656           },
2657           "need_id": {
2658             "title": "Need Id",
2659             "type": "integer"
2660           },
2661           "features": {
2662             "title": "Features",
2663             "type": "string"
2664           }
2665         }
2666       },
2667       "AnimalNeedsCreate": {
2668         "title": "AnimalNeedsCreate",
2669         "required": [
2670           "animal_id",
2671           "need_id",
2672           "features"
2673         ],
2674         "type": "object",
2675         "properties": {
2676           "animal_id": {
2677             "title": "Animal Id",
2678             "type": "integer"
2679           },
2680           "need_id": {
2681             "title": "Need Id",
2682             "type": "integer"
2683           },
2684           "features": {
2685             "title": "Features",
2686             "type": "string"
2687           }
2688         }
2689       },
2690       "AnimalNeedsUpdate": {
2691         "title": "AnimalNeedsUpdate",
2692         "required": [
2693           "animal_id",
2694           "need_id",
2695           "features"
2696         ],
2697         "type": "object",
2698         "properties": {
2699           "animal_id": {
2700             "title": "Animal Id",
2701             "type": "integer"
2702           },
2703           "need_id": {
2704             "title": "Need Id",
2705             "type": "integer"
2706           },
2707           "features": {
2708             "title": "Features",
2709             "type": "string"
2710           }
2711         }
2712       },
2713       "AnimalUpdate": {
2714         "title": "AnimalUpdate",
2715         "required": [
2716           "animal_id",
2717           "name",
2718           "species",
2719           "breed",
2720           "age",
2721           "sex",
2722           "weight",
2723           "health_info",
2724           "shop_id"
2725         ],
2726         "type": "object",
2727         "properties": {
2728           "animal_id": {
2729             "title": "Animal Id",
2730             "type": "integer"
2731           },
2732           "name": {
2733             "title": "Name",
2734             "type": "string"
2735           },
2736           "species": {
2737             "title": "Species",
2738             "type": "string"
2739           },
2740           "breed": {
2741             "title": "Breed",
2742             "type": "string"
2743           },
2744           "age": {
2745             "title": "Age",
2746             "type": "integer"
2747           },
2748           "sex": {
2749             "title": "Sex",
2750             "type": "string"
2751           },
2752           "weight": {
2753             "title": "Weight",
2754             "type": "number"
2755           },
2756           "health_info": {
2757             "title": "Health Info",
2758             "type": "string"
2759           },
2760           "shop_id": {
2761             "title": "Shop Id",
2762             "type": "integer"
2763           }
2764         }
2765       },
2766       "ClimateHistoryBase": {
2767         "title": "ClimateHistoryBase",
2768         "required": [
2769           "temperature",
2770           "humidity",
2771           "light_intensity",
2772           "record_date",
2773           "shop_id"
2774         ],
2775         "type": "object",
2776         "properties": {
2777           "temperature": {
2778             "title": "Temperature",
2779             "type": "number"
2780           },
2781           "humidity": {
2782             "title": "Humidity",
2783             "type": "number"
2784           },
2785           "light_intensity": {
2786             "title": "Light Intensity",
2787             "type": "number"
2788           },
2789           "record_date": {
2790             "title": "Record Date",
2791             "type": "string",
2792             "format": "date-time"
2793           },
2794           "shop_id": {
2795             "title": "Shop Id",
2796             "type": "integer"
2797           }
2798         }
2799       },
2800       "ClimateHistoryCreate": {
2801         "title": "ClimateHistoryCreate",
2802         "required": [
2803           "temperature",
2804           "humidity",
2805           "light_intensity",
2806           "record_date",
2807           "shop_id"
2808         ],
2809         "type": "object",
2810         "properties": {
2811           "temperature": {
2812             "title": "Temperature",
2813             "type": "number"
2814           },
2815           "humidity": {
2816             "title": "Humidity",
2817             "type": "number"
2818           },
2819           "light_intensity": {
2820             "title": "Light Intensity",
2821             "type": "number"
2822           },
2823           "record_date": {
2824             "title": "Record Date",
2825             "type": "string",
2826             "format": "date-time"
2827           },
2828           "shop_id": {
2829             "title": "Shop Id",
2830             "type": "integer"
2831           }
2832         }
2833       },
2834       "ClimateHistoryUpdate": {
2835         "title": "ClimateHistoryUpdate",
2836         "required": [
2837           "temperature",
2838           "humidity",
2839           "light_intensity",
2840           "record_date",
2841           "shop_id"
2842         ],
2843         "type": "object",
2844         "properties": {
2845           "temperature": {
2846             "title": "Temperature",
2847             "type": "number"
2848           },
2849           "humidity": {
2850             "title": "Humidity",
2851             "type": "number"
2852           },
2853           "light_intensity": {
2854             "title": "Light Intensity",
2855             "type": "number"
2856           },
2857           "record_date": {
2858             "title": "Record Date",
2859             "type": "string",
2860             "format": "date-time"
2861           },
2862           "shop_id": {
2863             "title": "Shop Id",
2864             "type": "integer"
2865           }
2866         }
2867       },
2868       "ClimateNeedsBase": {
2869         "title": "ClimateNeedsBase",
2870         "required": [
2871           "temperature",
2872           "humidity",
2873           "light",
2874           "animal_id"
2875         ],
2876         "type": "object",
2877         "properties": {
2878           "temperature": {
2879             "title": "Temperature",
2880             "type": "number"
2881           },
2882           "humidity": {
2883             "title": "Humidity",
2884             "type": "number"
2885           },
2886           "light": {
2887             "title": "Light",
2888             "type": "number"
2889           },
2890           "animal_id": {
2891             "title": "Animal Id",
2892             "type": "integer"
2893           }
2894         }
2895       },
2896       "ClimateNeedsCreate": {
2897         "title": "ClimateNeedsCreate",
2898         "required": [
2899           "temperature",
2900           "humidity",
2901           "light",
2902           "animal_id"
2903         ],
2904         "type": "object",
2905         "properties": {
2906           "temperature": {
2907             "title": "Temperature",
2908             "type": "number"
2909           },
2910           "humidity": {
2911             "title": "Humidity",
2912             "type": "number"
2913           },
2914           "light": {
2915             "title": "Light",
2916             "type": "number"
2917           },
2918           "animal_id": {
2919             "title": "Animal Id",
2920             "type": "integer"
2921           }
2922         }
2923       },
2924       "ClimateNeedsUpdate": {
2925         "title": "ClimateNeedsUpdate",
2926         "required": [
2927           "temperature",
2928           "humidity",
2929           "light",
2930           "animal_id"
2931         ],
2932         "type": "object",
2933         "properties": {
2934           "temperature": {
2935             "title": "Temperature",
2936             "type": "number"
2937           },
2938           "humidity": {
2939             "title": "Humidity",
2940             "type": "number"
2941           },
2942           "light": {
2943             "title": "Light",
2944             "type": "number"
2945           },
2946           "animal_id": {
2947             "title": "Animal Id",
2948             "type": "integer"
2949           }
2950         }
2951       },
2952       "ClimateSettingsBase": {
2953         "title": "ClimateSettingsBase",
2954         "required": [
2955           "temperature",
2956           "humidity",
2957           "light_intensity",
2958           "updated_at",
2959           "shop_id"
2960         ],
2961         "type": "object",
2962         "properties": {
2963           "temperature": {
2964             "title": "Temperature",
2965             "type": "number"
2966           },
2967           "humidity": {
2968             "title": "Humidity",
2969             "type": "number"
2970           },
2971           "light_intensity": {
2972             "title": "Light Intensity",
2973             "type": "number"
2974           },
2975           "updated_at": {
2976             "title": "Updated At",
2977             "type": "string",
2978             "format": "date-time"
2979           },
2980           "shop_id": {
2981             "title": "Shop Id",
2982             "type": "integer"
2983           }
2984         }
2985       },
2986       "ClimateSettingsCreate": {
2987         "title": "ClimateSettingsCreate",
2988         "required": [
2989           "temperature",
2990           "humidity",
2991           "light_intensity",
2992           "updated_at",
2993           "shop_id"
2994         ],
2995         "type": "object",
2996         "properties": {
2997           "temperature": {
2998             "title": "Temperature",
2999             "type": "number"
3000           },
3001           "humidity": {
3002             "title": "Humidity",
3003             "type": "number"
3004           },
3005           "light_intensity": {
3006             "title": "Light Intensity",
3007             "type": "number"
3008           },
3009           "updated_at": {
3010             "title": "Updated At",
3011             "type": "string",
3012             "format": "date-time"
3013           },
3014           "shop_id": {
3015             "title": "Shop Id",
3016             "type": "integer"
3017           }
3018         }
3019       },
3020       "ClimateSettingsUpdate": {
3021         "title": "ClimateSettingsUpdate",
3022         "required": [
3023           "temperature",
3024           "humidity",
3025           "light_intensity",
3026           "updated_at",
3027           "shop_id"
3028         ],
3029         "type": "object",
3030         "properties": {
3031           "temperature": {
3032             "title": "Temperature",
3033             "type": "number"
3034           },
3035           "humidity": {
3036             "title": "Humidity",
3037             "type": "number"
3038           },
3039           "light_intensity": {
3040             "title": "Light Intensity",
3041             "type": "number"
3042           },
3043           "updated_at": {
3044             "title": "Updated At",
3045             "type": "string",
3046             "format": "date-time"
3047           },
3048           "shop_id": {
3049             "title": "Shop Id",
3050             "type": "integer"
3051           }
3052         }
3053       },
3054       "FeedingBase": {
3055         "title": "FeedingBase",
3056         "required": [
3057           "food_name"
3058         ],
3059         "type": "object",
3060         "properties": {
3061           "food_name": {
3062             "title": "Food Name",
3063             "type": "string"
3064           }
3065         }
3066       },
3067       "FeedingCreate": {
3068         "title": "FeedingCreate",
3069         "required": [
3070           "food_name"
3071         ],
3072         "type": "object",
3073         "properties": {
3074           "food_name": {
3075             "title": "Food Name",
3076             "type": "string"
3077           }
3078         }
3079       },
3080       "FeedingUpdate": {
3081         "title": "FeedingUpdate",
3082         "required": [
3083           "food_name"
3084         ],
3085         "type": "object",
3086         "properties": {
3087           "food_name": {
3088             "title": "Food Name",
3089             "type": "string"
3090           }
3091         }
3092       },
3093       "HTTPValidationError": {
3094         "title": "HTTPValidationError",
3095         "type": "object",
3096         "properties": {
3097           "detail": {
3098             "title": "Detail",
3099             "type": "array",
3100             "items": {
3101               "$ref": "#/components/schemas/ValidationError"
3102             }
3103           }
3104         }
3105       },
3106       "NotificationBase": {
3107         "title": "NotificationBase",
3108         "required": [
3109           "user_id",
3110           "message",
3111           "timestamp"
3112         ],
3113         "type": "object",
3114         "properties": {
3115           "user_id": {
3116             "title": "User Id",
3117             "type": "integer"
3118           },
3119           "message": {
3120             "title": "Message",
3121             "type": "string"
3122           },
3123           "timestamp": {
3124             "title": "Timestamp",
3125             "type": "string",
3126             "format": "date-time"
3127           }
3128         }
3129       },
3130       "NotificationCreate": {
3131         "title": "NotificationCreate",
3132         "required": [
3133           "user_id",
3134           "message",
3135           "timestamp"
3136         ],
3137         "type": "object",
3138         "properties": {
3139           "user_id": {
3140             "title": "User Id",
3141             "type": "integer"
3142           },
3143           "message": {
3144             "title": "Message",
3145             "type": "string"
3146           },
3147           "timestamp": {
3148             "title": "Timestamp",
3149             "type": "string",
3150             "format": "date-time"
3151           }
3152         }
3153       },
3154       "NotificationUpdate": {
3155         "title": "NotificationUpdate",
3156         "required": [
3157           "user_id",
3158           "message",
3159           "timestamp"
3160         ],
3161         "type": "object",
3162         "properties": {
3163           "user_id": {
3164             "title": "User Id",
3165             "type": "integer"
3166           },
3167           "message": {
3168             "title": "Message",
3169             "type": "string"
3170           },
3171           "timestamp": {
3172             "title": "Timestamp",
3173             "type": "string",
3174             "format": "date-time"
3175           }
3176         }
3177       },
3178       "SensorBase": {
3179         "title": "SensorBase",
3180         "required": [
3181           "type",
3182           "location",
3183           "current_value",
3184           "last_maintenance",
3185           "shop_id"
3186         ],
3187         "type": "object",
3188         "properties": {
3189           "type": {
3190             "title": "Type",
3191             "type": "string"
3192           },
3193           "location": {
3194             "title": "Location",
3195             "type": "string"
3196           },
3197           "current_value": {
3198             "title": "Current Value",
3199             "type": "number"
3200           },
3201           "last_maintenance": {
3202             "title": "Last Maintenance",
3203             "type": "string"
3204           },
3205           "shop_id": {
3206             "title": "Shop Id",
3207             "type": "integer"
3208           }
3209         }
3210       },
3211       "SensorCreate": {
3212         "title": "SensorCreate",
3213         "required": [
3214           "type",
3215           "location",
3216           "current_value",
3217           "last_maintenance",
3218           "shop_id"
3219         ],
3220         "type": "object",
3221         "properties": {
3222           "type": {
3223             "title": "Type",
3224             "type": "string"
3225           },
3226           "location": {
3227             "title": "Location",
3228             "type": "string"
3229           },
3230           "current_value": {
3231             "title": "Current Value",
3232             "type": "number"
3233           },
3234           "last_maintenance": {
3235             "title": "Last Maintenance",
3236             "type": "string"
3237           },
3238           "shop_id": {
3239             "title": "Shop Id",
3240             "type": "integer"
3241           }
3242         }
3243       },
3244       "SensorUpdate": {
3245         "title": "SensorUpdate",
3246         "required": [
3247           "type",
3248           "location",
3249           "current_value",
3250           "last_maintenance",
3251           "shop_id"
3252         ],
3253         "type": "object",
3254         "properties": {
3255           "type": {
3256             "title": "Type",
3257             "type": "string"
3258           },
3259           "location": {
3260             "title": "Location",
3261             "type": "string"
3262           },
3263           "current_value": {
3264             "title": "Current Value",
3265             "type": "number"
3266           },
3267           "last_maintenance": {
3268             "title": "Last Maintenance",
3269             "type": "string"
3270           },
3271           "shop_id": {
3272             "title": "Shop Id",
3273             "type": "integer"
3274           }
3275         }
3276       },
3277       "ShopBase": {
3278         "title": "ShopBase",
3279         "required": [
3280           "name",
3281           "location",
3282           "work_schedule"
3283         ],
3284         "type": "object",
3285         "properties": {
3286           "name": {
3287             "title": "Name",
3288             "type": "string"
3289           },
3290           "location": {
3291             "title": "Location",
3292             "type": "string"
3293           },
3294           "work_schedule": {
3295             "title": "Work Schedule",
3296             "type": "string"
3297           }
3298         }
3299       },
3300       "ShopCreate": {
3301         "title": "ShopCreate",
3302         "required": [
3303           "name",
3304           "location",
3305           "work_schedule"
3306         ],
3307         "type": "object",
3308         "properties": {
3309           "name": {
3310             "title": "Name",
3311             "type": "string"
3312           },
3313           "location": {
3314             "title": "Location",
3315             "type": "string"
3316           },
3317           "work_schedule": {
3318             "title": "Work Schedule",
3319             "type": "string"
3320           }
3321         }
3322       },
3323       "ShopSuppliesBase": {
3324         "title": "ShopSuppliesBase",
3325         "required": [
3326           "shop_id",
3327           "supply_id",
3328           "quantity"
3329         ],
3330         "type": "object",
3331         "properties": {
3332           "shop_id": {
3333             "title": "Shop Id",
3334             "type": "integer"
3335           },
3336           "supply_id": {
3337             "title": "Supply Id",
3338             "type": "integer"
3339           },
3340           "quantity": {
3341             "title": "Quantity",
3342             "type": "integer"
3343           }
3344         }
3345       },
3346       "ShopSuppliesCreate": {
3347         "title": "ShopSuppliesCreate",
3348         "required": [
3349           "shop_id",
3350           "supply_id",
3351           "quantity"
3352         ],
3353         "type": "object",
3354         "properties": {
3355           "shop_id": {
3356             "title": "Shop Id",
3357             "type": "integer"
3358           },
3359           "supply_id": {
3360             "title": "Supply Id",
3361             "type": "integer"
3362           },
3363           "quantity": {
3364             "title": "Quantity",
3365             "type": "integer"
3366           }
3367         }
3368       },
3369       "ShopSuppliesUpdate": {
3370         "title": "ShopSuppliesUpdate",
3371         "required": [
3372           "shop_id",
3373           "supply_id",
3374           "quantity"
3375         ],
3376         "type": "object",
3377         "properties": {
3378           "shop_id": {
3379             "title": "Shop Id",
3380             "type": "integer"
3381           },
3382           "supply_id": {
3383             "title": "Supply Id",
3384             "type": "integer"
3385           },
3386           "quantity": {
3387             "title": "Quantity",
3388             "type": "integer"
3389           }
3390         }
3391       },
3392       "ShopUpdate": {
3393         "title": "ShopUpdate",
3394         "required": [
3395           "name",
3396           "location",
3397           "work_schedule"
3398         ],
3399         "type": "object",
3400         "properties": {
3401           "name": {
3402             "title": "Name",
3403             "type": "string"
3404           },
3405           "location": {
3406             "title": "Location",
3407             "type": "string"
3408           },
3409           "work_schedule": {
3410             "title": "Work Schedule",
3411             "type": "string"
3412           }
3413         }
3414       },
3415       "SuppliesBase": {
3416         "title": "SuppliesBase",
3417         "required": [
3418           "name",
3419           "description",
3420           "price"
3421         ],
3422         "type": "object",
3423         "properties": {
3424           "name": {
3425             "title": "Name",
3426             "type": "string"
3427           },
3428           "description": {
3429             "title": "Description",
3430             "type": "string"
3431           },
3432           "price": {
3433             "title": "Price",
3434             "type": "number"
3435           }
3436         }
3437       },
3438       "SuppliesCreate": {
3439         "title": "SuppliesCreate",
3440         "required": [
3441           "name",
3442           "description",
3443           "price"
3444         ],
3445         "type": "object",
3446         "properties": {
3447           "name": {
3448             "title": "Name",
3449             "type": "string"
3450           },
3451           "description": {
3452             "title": "Description",
3453             "type": "string"
3454           },
3455           "price": {
3456             "title": "Price",
3457             "type": "number"
3458           }
3459         }
3460       },
3461       "SuppliesUpdate": {
3462         "title": "SuppliesUpdate",
3463         "required": [
3464           "name",
3465           "description",
3466           "price"
3467         ],
3468         "type": "object",
3469         "properties": {
3470           "name": {
3471             "title": "Name",
3472             "type": "string"
3473           },
3474           "description": {
3475             "title": "Description",
3476             "type": "string"
3477           },
3478           "price": {
3479             "title": "Price",
3480             "type": "number"
3481           }
3482         }
3483       },
3484       "UserBase": {
3485         "title": "UserBase",
3486         "required": [
3487           "username",
3488           "role",
3489           "email",
3490           "mobile_number",
3491           "age"
3492         ],
3493         "type": "object",
3494         "properties": {
3495           "username": {
3496             "title": "Username",
3497             "type": "string"
3498           },
3499           "role": {
3500             "title": "Role",
3501             "type": "string"
3502           },
3503           "email": {
3504             "title": "Email",
3505             "type": "string"
3506           },
3507           "mobile_number": {
3508             "title": "Mobile Number",
3509             "type": "string"
3510           },
3511           "age": {
3512             "title": "Age",
3513             "type": "integer"
3514           }
3515         }
3516       },
3517       "UserCreate": {
3518         "title": "UserCreate",
3519         "required": [
3520           "username",
3521           "role",
3522           "email",
3523           "mobile_number",
3524           "age",
3525           "password"
3526         ],
3527         "type": "object",
3528         "properties": {
3529           "username": {
3530             "title": "Username",
3531             "type": "string"
3532           },
3533           "role": {
3534             "title": "Role",
3535             "type": "string"
3536           },
3537           "email": {
3538             "title": "Email",
3539             "type": "string"
3540           },
3541           "mobile_number": {
3542             "title": "Mobile Number",
3543             "type": "string"
3544           },
3545           "age": {
3546             "title": "Age",
3547             "type": "integer"
3548           },
3549           "password": {
3550             "title": "Password",
3551             "type": "string"
3552           }
3553         }
3554       },
3555       "UserInShopBase": {
3556         "title": "UserInShopBase",
3557         "required": [
3558           "user_id",
3559           "shop_id"
3560         ],
3561         "type": "object",
3562         "properties": {
3563           "user_id": {
3564             "title": "User Id",
3565             "type": "integer"
3566           },
3567           "shop_id": {
3568             "title": "Shop Id",
3569             "type": "integer"
3570           }
3571         }
3572       },
3573       "UserInShopCreate": {
3574         "title": "UserInShopCreate",
3575         "required": [
3576           "user_id",
3577           "shop_id"
3578         ],
3579         "type": "object",
3580         "properties": {
3581           "user_id": {
3582             "title": "User Id",
3583             "type": "integer"
3584           },
3585           "shop_id": {
3586             "title": "Shop Id",
3587             "type": "integer"
3588           }
3589         }
3590       },
3591       "UserInShopUpdate": {
3592         "title": "UserInShopUpdate",
3593         "required": [
3594           "user_id",
3595           "shop_id"
3596         ],
3597         "type": "object",
3598         "properties": {
3599           "user_id": {
3600             "title": "User Id",
3601             "type": "integer"
3602           },
3603           "shop_id": {
3604             "title": "Shop Id",
3605             "type": "integer"
3606           }
3607         }
3608       },
3609       "UserUpdate": {
3610         "title": "UserUpdate",
3611         "required": [
3612           "username",
3613           "role",
3614           "email",
3615           "mobile_number",
3616           "age"
3617         ],
3618         "type": "object",
3619         "properties": {
3620           "username": {
3621             "title": "Username",
3622             "type": "string"
3623           },
3624           "role": {
3625             "title": "Role",
3626             "type": "string"
3627           },
3628           "email": {
3629             "title": "Email",
3630             "type": "string"
3631           },
3632           "mobile_number": {
3633             "title": "Mobile Number",
3634             "type": "string"
3635           },
3636           "age": {
3637             "title": "Age",
3638             "type": "integer"
3639           }
3640         }
3641       },
3642       "ValidationError": {
3643         "title": "ValidationError",
3644         "required": [
3645           "loc",
3646           "msg",
3647           "type"
3648         ],
3649         "type": "object",
3650         "properties": {
3651           "loc": {
3652             "title": "Location",
3653             "type": "array",
3654             "items": {
3655               "anyOf": [
3656                 {
3657                   "type": "string"
3658                 },
3659                 {
3660                   "type": "integer"
3661                 }
3662               ]
3663             }
3664           },
3665           "msg": {
3666             "title": "Message",
3667             "type": "string"
3668           },
3669           "type": {
3670             "title": "Error Type",
3671             "type": "string"
3672           }
3673         }
3674       }
3675     }
3676   }
3677 }







ДОДАТОК Д
Логіка взаємодії серверної частини з БД

Моделі  для основних таблиць (User, Shop, Animal, Sensor, ClimateSettings):

1 from sqlalchemy import Column, Integer, String
2 from app.database import Base
3 
4 class User(Base):
5     __tablename__ = "Users"
6     user_id = Column(Integer, primary_key=True, index=True)
7     username = Column(String, unique=True, index=True)
8     password = Column(String)
9     role = Column(String)
10     email = Column(String)
11     mobile_number = Column(String)
12     age = Column(Integer)
13 
14 class Shop(Base):
15     __tablename__ = "Shop"
16     shop_id = Column(Integer, primary_key=True, index=True)
17     name = Column(String)
18     location = Column(String)
19     work_schedule = Column(String)
20 
21 class Animal(Base):
22     __tablename__ = "Animal"
23     animal_id = Column(Integer, primary_key=True, index=True)
24     name = Column(String)
25     species = Column(String)
26     breed = Column(String)
27     age = Column(Integer)
28     sex = Column(String)
29     weight = Column(Float)
30     health_info = Column(Text)
31     shop_id = Column(Integer, ForeignKey("Shop.shop_id"))
32 
33 class Sensor(Base):
34     __tablename__ = "Sensor"
35     sensor_id = Column(Integer, primary_key=True, index=True)
36     type = Column(String)
37     location = Column(String)
38     current_value = Column(Float)
39     last_maintenance = Column(DateTime)
40     shop_id = Column(Integer, ForeignKey("Shop.shop_id"))
41 
42 class ClimateSettings(Base):
43     __tablename__ = "ClimateSettings"
44     setting_id = Column(Integer, primary_key=True, index=True)
45     temperature = Column(Float)
46     humidity = Column(Float)
47     light_intensity = Column(Float)
48     updated_at = Column(DateTime)
49     shop_id = Column(Integer, ForeignKey("Shop.shop_id"))

CRUD операції для основних таблиць (User, Shop, Animal, Sensor, ClimateSettings):

1 from sqlalchemy.orm import Session
2 from app.models.user import User
3 from app.schemas.user import UserCreate, UserUpdate
4 
5 def create_user(db: Session, user: UserCreate):
6     db_user = User(**user.dict())
7     db.add(db_user)
8     db.commit()
9     db.refresh(db_user)
10     return db_user
11 
12 def get_user(db: Session, user_id: int):
13     return db.query(User).filter(User.user_id == user_id).first()
14 
15 def update_user(db: Session, user_id: int, user: UserUpdate):
16     db_user = db.query(User).filter(User.user_id == user_id).first()
17     if db_user:
18         for key, value in user.dict(exclude_unset=True).items():
19             setattr(db_user, key, value)
20         db.commit()
21         db.refresh(db_user)
22     return db_user
23 
24 def delete_user(db: Session, user_id: int):
25     db_user = db.query(User).filter(User.user_id == user_id).first()
26     if db_user:
27         db.delete(db_user)
28         db.commit()
29     return db_user
30 
31 from app.models.shop import Shop
32 from app.schemas.shop import ShopCreate, ShopUpdate
33 
34 def create_shop(db: Session, shop: ShopCreate):
35     db_shop = Shop(**shop.dict())
36     db.add(db_shop)
37     db.commit()
38     db.refresh(db_shop)
39     return db_shop
40 
41 def get_shop(db: Session, shop_id: int):
42     return db.query(Shop).filter(Shop.shop_id == shop_id).first()
43 
44 def update_shop(db: Session, shop_id: int, shop: ShopUpdate):
45     db_shop = db.query(Shop).filter(Shop.shop_id == shop_id).first()
46     if db_shop:
47         for key, value in shop.dict().items():
48             setattr(db_shop, key, value)
49         db.commit()
50         db.refresh(db_shop)
51     return db_shop
52 
53 def delete_shop(db: Session, shop_id: int):
54     db_shop = db.query(Shop).filter(Shop.shop_id == shop_id).first()
55     if db_shop:
56         db.delete(db_shop)
57         db.commit()
58     return db_shop
59 
60 from app.models.animal import Animal
61 from app.schemas.animal import AnimalCreate, AnimalUpdate
62 
63 # Create
64 def create_animal(db: Session, animal: AnimalCreate):
65     db_animal = Animal(name=animal.name, species=animal.species, breed=animal.breed, age=animal.age, sex=animal.sex, weight=animal.weight, health_info=animal.health_info, shop_id=animal.shop_id)
66     db.add(db_animal)
67     db.commit()
68     db.refresh(db_animal)
69     return db_animal
70 
71 # Read
72 def get_animal(db: Session, animal_id: int):
73     return db.query(Animal).filter(Animal.animal_id == animal_id).first()
74 
75 # Delete
76 def delete_animal(db: Session, animal_id: int):
77     db_animal = db.query(Animal).filter(Animal.animal_id == animal_id).first()
78     if db_animal:
79         db.delete(db_animal)
80         db.commit()
81     return db_animal
82 
83 def update_animal(db: Session, animal_id: int, animal_update: AnimalUpdate):
84     db_animal = db.query(Animal).filter(Animal.animal_id == animal_id).first()
85     if db_animal:
86         for key, value in animal_update.dict(exclude_unset=True).items():
87             setattr(db_animal, key, value)
88         db.commit()
89         db.refresh(db_animal)
90     return db_animal
91 
92 from app.models.sensor import Sensor
93 from app.schemas.sensor import SensorCreate, SensorUpdate
94 
95 def create_sensor(db: Session, sensor: SensorCreate):
96     db_sensor = Sensor(**sensor.dict())
97     db.add(db_sensor)
98     db.commit()
99     db.refresh(db_sensor)
100     return db_sensor
101 
102 def get_sensor(db: Session, sensor_id: int):
103     return db.query(Sensor).filter(Sensor.sensor_id == sensor_id).first()
104 
105 def update_sensor(db: Session, sensor_id: int, sensor: SensorUpdate):
106     db_sensor = db.query(Sensor).filter(Sensor.sensor_id == sensor_id).first()
107     if db_sensor:
108         for key, value in sensor.dict().items():
109             setattr(db_sensor, key, value)
110         db.commit()
111         db.refresh(db_sensor)
112     return db_sensor
113 
114 def delete_sensor(db: Session, sensor_id: int):
115     db_sensor = db.query(Sensor).filter(Sensor.sensor_id == sensor_id).first()
116     if db_sensor:
117         db.delete(db_sensor)
118         db.commit()
119     return db_sensor
120 
121 from app.models.climate_settings import ClimateSettings
122 from app.schemas.climate_settings import ClimateSettingsCreate, ClimateSettingsUpdate
123 
124 def create_climate_settings(db: Session, climate_settings: ClimateSettingsCreate):
125     db_climate_settings = ClimateSettings(**climate_settings.dict())
126     db.add(db_climate_settings)
127     db.commit()
128     db.refresh(db_climate_settings)
129     return db_climate_settings
130 
131 def get_climate_settings(db: Session, setting_id: int):
132     return db.query(ClimateSettings).filter(ClimateSettings.setting_id == setting_id).first()
133 
134 def update_climate_settings(db: Session, setting_id: int, climate_settings: ClimateSettingsUpdate):
135     db_climate_settings = db.query(ClimateSettings).filter(ClimateSettings.setting_id == setting_id).first()
136     if db_climate_settings:
137         for key, value in climate_settings.dict().items():
138             setattr(db_climate_settings, key, value)
139         db.commit()
140         db.refresh(db_climate_settings)
141     return db_climate_settings
142 
143 def delete_climate_settings(db: Session, setting_id: int):
144     db_climate_settings = db.query(ClimateSettings).filter(ClimateSettings.setting_id == setting_id).first()
145     if db_climate_settings:
146         db.delete(db_climate_settings)
147         db.commit()
148     return db_climate_settings
149





ДОДАТОК Е
Логіка взаємодії серверної частини з клієнтами

Обробка запитів для основних таблиць (User, Shop, Animal, Sensor, ClimateSettings):

1 from app.crud import user as crud_user
2 from app.schemas.user import UserBase, UserCreate, UserUpdate
3 
4 router = APIRouter()
5 
6 def get_db():
7     db = SessionLocal()
8     try:
9         yield db
10     finally:
11         db.close()
12 
13 @router.post("/", response_model=UserBase)
14 def create_user(user: UserCreate, db: Session = Depends(get_db)):
15     return crud_user.create_user(db=db, user=user)
16 
17 @router.get("/{user_id}", response_model=UserBase)
18 def read_user(user_id: int, db: Session = Depends(get_db)):
19     db_user = crud_user.get_user(db, user_id=user_id)
20     if db_user is None:
21         raise HTTPException(status_code=404, detail="User not found")
22     return db_user
23 
24 @router.put("/{user_id}", response_model=UserBase)
25 def update_user(user_id: int, user: UserUpdate, db: Session = Depends(get_db)):
26     db_user = crud_user.update_user(db, user_id=user_id, user=user)
27     if db_user is None:
28         raise HTTPException(status_code=404, detail="User not found")
29     return db_user
30 
31 @router.delete("/{user_id}", response_model=UserBase)
32 def delete_user(user_id: int, db: Session = Depends(get_db)):
33     db_user = crud_user.delete_user(db, user_id=user_id)
34     if db_user is None:
35         raise HTTPException(status_code=404, detail="User not found")
36     return db_user
37 
38 from app.crud import shop as crud_shop
39 from app.schemas.shop import ShopBase, ShopCreate, ShopUpdate
40 
41 router = APIRouter()
42 
43 def get_db():
44     db = SessionLocal()
45     try:
46         yield db
47     finally:
48         db.close()
49 
50 @router.post("/", response_model=ShopBase)
51 def create_shop(shop: ShopCreate, db: Session = Depends(get_db)):
52     return crud_shop.create_shop(db=db, shop=shop)
53 
54 @router.get("/{shop_id}", response_model=ShopBase)
55 def read_shop(shop_id: int, db: Session = Depends(get_db)):
56     db_shop = crud_shop.get_shop(db, shop_id=shop_id)
57     if db_shop is None:
58         raise HTTPException(status_code=404, detail="Shop not found")
59     return db_shop
60 
61 @router.put("/{shop_id}", response_model=ShopBase)
62 def update_shop(shop_id: int, shop: ShopUpdate, db: Session = Depends(get_db)):
63     db_shop = crud_shop.update_shop(db, shop_id=shop_id, shop=shop)
64     if db_shop is None:
65         raise HTTPException(status_code=404, detail="Shop not found")
66     return db_shop
67 
68 @router.delete("/{shop_id}", response_model=ShopBase)
69 def delete_shop(shop_id: int, db: Session = Depends(get_db)):
70     db_shop = crud_shop.delete_shop(db, shop_id=shop_id)
71     if db_shop is None:
72         raise HTTPException(status_code=404, detail="Shop not found")
73     return db_shop
74 
75 from app.crud import animal as crud_animal
76 from app.schemas.animal import AnimalBase, AnimalCreate, AnimalUpdate
77 
78 router = APIRouter()
79 
80 def get_db():
81     db = SessionLocal()
82     try:
83         yield db
84     finally:
85         db.close()
86 
87 @router.post("/", response_model=AnimalBase)
88 def create_animal(animal: AnimalCreate, db: Session = Depends(get_db)):
89     return crud_animal.create_animal(db=db, animal=animal)
90 
91 @router.get("/{animal_id}", response_model=AnimalBase)
92 def read_animal(animal_id: int, db: Session = Depends(get_db)):
93     db_animal = crud_animal.get_animal(db, animal_id=animal_id)
94     if db_animal is None:
95         raise HTTPException(status_code=404, detail="Animal not found123")
96     return db_animal
97 
98 @router.delete("/{animal_id}", response_model=AnimalBase)
99 def delete_animal(animal_id: int, db: Session = Depends(get_db)):
100     db_animal = crud_animal.delete_animal(db, animal_id=animal_id)
101     if db_animal is None:
102         raise HTTPException(status_code=404, detail="Animal not found321")
103     return db_animal
104 
105 @router.put("/{animal_id}", response_model=AnimalBase)
106 def update_animal(animal_id: int, animal: AnimalUpdate, db: Session = Depends(get_db)):
107     db_animal = crud_animal.update_animal(db, animal_id=animal_id, animal_update=animal)
108     if db_animal is None:
109         raise HTTPException(status_code=404, detail="Animal not found")
110     return db_animal
111 
112 from app.crud import sensor as crud_sensor
113 from app.schemas.sensor import SensorBase, SensorCreate, SensorUpdate
114 
115 router = APIRouter()
116 
117 def get_db():
118     db = SessionLocal()
119     try:
120         yield db
121     finally:
122         db.close()
123 
124 @router.post("/", response_model=SensorBase)
125 def create_sensor(sensor: SensorCreate, db: Session = Depends(get_db)):
126     return crud_sensor.create_sensor(db=db, sensor=sensor)
127 
128 @router.get("/{sensor_id}", response_model=SensorBase)
129 def read_sensor(sensor_id: int, db: Session = Depends(get_db)):
130     db_sensor = crud_sensor.get_sensor(db, sensor_id=sensor_id)
131     if db_sensor is None:
132         raise HTTPException(status_code=404, detail="Sensor not found")
133     return db_sensor
134 
135 @router.put("/{sensor_id}", response_model=SensorBase)
136 def update_sensor(sensor_id: int, sensor: SensorUpdate, db: Session = Depends(get_db)):
137     db_sensor = crud_sensor.update_sensor(db, sensor_id=sensor_id, sensor=sensor)
138     if db_sensor is None:
139         raise HTTPException(status_code=404, detail="Sensor not found")
140     return db_sensor
141 
142 @router.delete("/{sensor_id}", response_model=SensorBase)
143 def delete_sensor(sensor_id: int, db: Session = Depends(get_db)):
144     db_sensor = crud_sensor.delete_sensor(db, sensor_id=sensor_id)
145     if db_sensor is None:
146         raise HTTPException(status_code=404, detail="Sensor not found")
147     return db_sensor
148 
149 from app.crud import climate_settings as crud_climate_settings
150 from app.schemas.climate_settings import ClimateSettingsBase, ClimateSettingsCreate, ClimateSettingsUpdate
151 
152 router = APIRouter()
153 
154 def get_db():
155     db = SessionLocal()
156     try:
157         yield db
158     finally:
159         db.close()
160 
161 @router.post("/", response_model=ClimateSettingsBase)
162 def create_climate_settings(climate_settings: ClimateSettingsCreate, db: Session = Depends(get_db)):
163     return crud_climate_settings.create_climate_settings(db=db, climate_settings=climate_settings)
164 
165 @router.get("/{setting_id}", response_model=ClimateSettingsBase)
166 def read_climate_settings(setting_id: int, db: Session = Depends(get_db)):
167     db_climate_settings = crud_climate_settings.get_climate_settings(db, setting_id=setting_id)
168     if db_climate_settings is None:
169         raise HTTPException(status_code=404, detail="Climate settings not found")
170     return db_climate_settings
171 
172 @router.put("/{setting_id}", response_model=ClimateSettingsBase)
173 def update_climate_settings(setting_id: int, climate_settings: ClimateSettingsUpdate, db: Session = Depends(get_db)):
174     db_climate_settings = crud_climate_settings.update_climate_settings(db, setting_id=setting_id, climate_settings=climate_settings)
175     if db_climate_settings is None:
176         raise HTTPException(status_code=404, detail="Climate settings not found")
177     return db_climate_settings
178 
179 @router.delete("/{setting_id}", response_model=ClimateSettingsBase)
180 def delete_climate_settings(setting_id: int, db: Session = Depends(get_db)):
181     db_climate_settings = crud_climate_settings.delete_climate_settings(db, setting_id=setting_id)
182     if db_climate_settings is None:
183         raise HTTPException(status_code=404, detail="Climate settings not found")
184     return db_climate_settings



























ДОДАТОК Ж
Посилання на відео з тестуванням

  – Посилання на відео тестування роботи програми.
